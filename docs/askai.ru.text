<!--HLF:
     Language = Russian,Russian (Русский);
     PluginContents = Ask AI;
    TopicHeading = h6;
    Margin = 1;
    IndentCode = 4;
     IndentList = 0;
    IndentPara = 0;
    IndentQuote = 4;
    PlainCode = false;
    PlainHeading = false;
    CenterHeading = false;
     EmptyLinesBeforeTopic = 2;
    EmptyLinesAfterHeading = 1;
     EmptyLinesBeforeHeading = 2;
    HighlightListBullet = true;
    HighlightListNumber = true;
-->

<!--
.Options CtrlStartPosChar=^|
v0.1
-->

Ask AI -- макрос для взаимодействия с ChatGPT (и другими LLM-сервисами) в FAR {#Contents refsTitle="Описание"}
=============================================================================

Этот макрос -- дальнейшее развитие **bito.ai code assistant** ([см.](https://forum.farmanager.com/viewtopic.php?t=13283)),
теперь с поддержкой множества LLM-сервисов.

Доступ к сервисам возможен как посредством разнообразных консольных утилит, так и напрямую через REST API.

Каждый из LLM-сервисов имеет свои достоинства и недостатки -- [выбор][Обзор сервисов] за пользователем.

Макрос назначен на `Ctrl+B` и открывает [диалог] для ввода запроса и настройки параметров генерации.
При этом выделение редактора передаётся в качестве контекста.

Может быть также запущен в качестве скрипта [LuaShell].

_Вывод_ ответа осуществляется в отдельном редакторе.

> Макросы, активные в окне с выводом:
>
> - `Ctrl+Shift+Ins`:
>   - скопировать выделенный текст, склеив свёрнутые строки обратно в параграфы;
>   - при отсутствии выделения ищет и обрабатывает блок кода под курсором.
> - `Alt+F2` полностью убрать форматирование (свёртку).

`Ctrl+B:Double` позволяет в любой момент открыть окно с выводом повторно.

Если выделен текст, то нажатие `Ctrl+B:Hold` продолжает чат без открытия диалога,
передавая выделение в качестве нового запроса.

**Примечание**: составные сочетания типа `Ctrl+B:Double` предполагают использование модуля [MacroEx].  
Альтернативно, можно заменить сочетание на простое через параметр `keyOutput`.  
Его можно изменить прямо в коде (в начале скрипта), либо воспользоваться возможностями [ScriptsBrowser]/`cfgscript`.

[Вывод]: #Contents
[MacroEx]: https://forum.farmanager.com/viewtopic.php?f=15&t=8764


Диалог {#Dialog}
======

Диалог служит для ввода __запроса__ и настройки различных параметров.  
Ранее набранные приглашения доступны в истории поля ввода.  
Для удобного редактирования объёмных/многострочных запросов рекомендуется макрос
[EditBoxToEditor](https://forum.farmanager.com/viewtopic.php?p=178783#p178783).

Вместе с запросом передаётся __выделенный в редакторе текст__.  
Если в запросе присутствует шаблон `{{%input%}}`, то выделенный текст подставляется на его место.  
В противном случае выделенный текст добавляется в конец запроса.

Последующие запросы учитывают предыдущий контекст, образуя диалог (_сессию_), если не настроено иное.

На верхней рамке диалога отображается имя текущего [профиля][профили],
перейти к нему можно не только курсорными клавишами, но и по `CtrlHome`.

В поле редактирования запроса можно переместиться с помощью хоткея или нажатием `PgUp`.

Примечание: повторные нажатия `CtrlHome` / `PgUp` переключают фокус между полями профиля / запроса.

Доступны такие __настройки__:

- `Session` - по умолчанию (состояние `[?]`) сессия продолжается, пока открыт редактор с [выводом][вывод].  
  Также сессию можно в любой момент принудительно __очистить__ кнопкой "`-`".
- `Timeout` - предельное время ожидания ответа на запрос (для "нативных" конфигураций).
- __Форматирование вывода__ по заданной границе или по ширине окна (состояние `[?]`).  
  Блоки кода не форматируются.
- Установка различных __параметров__ генерации (в зависимости от выбранного сервиса/утилиты).  
  Значения запоминаются в истории и легко доступны для повторного выбора.  
  Некоторые параметры специфичны для отдельной __конфигурации__, другие могут разделяться между разными
  (посредством общей истории).
- Возможность установки __переменных окружения__, необходимых для отдельных утилит.

__Кнопки__:

- `[ Utility cfg ]` доступна в случае, если используемая активной конфигурацией утилита
  держит __настройки в собственном файле__; нажатие кнопки позволяет открыть его в редакторе.
- `[ Presets - F5 ]` позволяет подставить сразу несколько параметров набором ("пресетом").  
  По нажатию кнопки открывается [Список пресетов][Пресеты].
- `[ Models - F6 ]` запрашивает список __моделей__ через API, если это предусмотрено конфигурацией,
  в противном случае кнопка недоступна.  
  Также фиксированный список моделей может быть уже предварительно занесён в историю поля ввода
  (актуально для некоторых пресетов и конфигураций).
- `[ Providers - ^B ]` или же повторное нажатие `Ctrl+B` позволяет переключиться на другую конфигурацию,
  открывая [Меню выбора конфигурации провайдера].
- `{ Go! }` или `Enter` -- запуск генерации ответа модели, [вывод] открывается в отдельном редакторе.

Дополнительные шорткаты:

- `Shift+F4` - задать заголовки запроса (для _OpenAI-compatible_) в виде таблицы Lua или Moonscript
  (удобно использовать _[single line table literal](https://moonscript.org/reference/#the-language/table-literals)_).
- `Shift+F5` - открыть историю поля `apibase`.
- `Shift+F6` - открыть отсортированный в алфавитном порядке список истории моделей.
- `Ctrl+H` - переключение между полным и "компактным" режимом диалога
  (без параметров конфигурации и кнопок).
- `Alt+F4` - открывает в редакторе файл активной конфигурации провайдера (\*.lua.cfg),
  например при необходимости изменить набор доступных параметров.

По умолчанию диалог открывается в полном режиме, но это можно изменить опцией `compactDlg`,
которая находится в начале скрипта.  
Помимо этого там же можно настроить шорткаты для вызова макросов и некоторые другие параметры.

А чтобы после каждого обновления скрипта не приходилось вручную восстанавливать
изменённые значения, рекомендуется использовать возможности **cfgscript** из пакета
[ScriptsBrowser](https://forum.farmanager.com/viewtopic.php?f=15&t=10418).


Профили {#Profiles}
-------

По существу **профиль** представляет собой именованный набор значений, сохраняемых в истории соответствующих
полей ввода.

Профили задуманы как средство для выполнения "быстрых действий" с использованием макросов (см. ниже),
и без этого не несут большой ценности, т.к. для обычного свободного чата достаточно штатного выбора
из истории.

На практике же при использовании _AskAI_ часто возникают типовые повторяющиеся задачи,
которые хотелось бы выполнять максимально оперативно, с заранее заданными параметрами, не тратя внимание на ввод,
и даже не открывая диалога, если например все исходные данные содержатся в выделенном тексте.

Для обеспечения этого и задуманы профили.


Управление
----------

Текущий профиль отображается на верхней рамке, быстро перейти в поле для редактирования можно нажатием
`Ctrl+Home`; если ввести имя несуществующего профиля, то он будет создан.

Выбрать существующий профиль можно из выпадающего списка, по `Shift+Del` в этом списке профиль можно удалить.

Находясь в любом поле ввода с помощью `Ctrl+Up` можно открыть список истории соответствующего поля из
профиля `default`.

[Профили]: #Profiles


Использование
-------------

Предполагается, что под каждую типовую задачу заводится отдельный **профиль**, который можно вызвать одним нажатием
клавиши, используя макрос.

Примеры макросов можно увидеть в `macros.lua.sample` (для загрузки переименовать в файл с расширением `.lua`).

Это самый обычный макрофайл, загружаемый штатным образом, а функция `askAI` доступна в нём как модуль, через `require`.

В макросе задаётся только имя профиля, а соответствующая роль, запрос (_prompt_), провайдер и прочее
настраиваются уже в диалоге. Введённые значения запоминаются каждый раз при закрытии диалога по `Enter`/`CtrlEnter`;
также можно сохранить их принудительно нажатием `Shift+Enter` в любой строке редактирования.

Примечание: заранее создавать профиль нет необходимости, он будет и так открыт при вызове макроса
(сначала надо будет выбрать [провайдера][Провайдеры]).


Работа с пресетами {#Presets}
------------------

**Список пресетов** вызывается из [диалога][Диалог] нажатием соответствующей кнопки, хоткеем, или же по `F5`.

"Пресет" представляет собой именованный набор параметров, подставляемых в соответствующие поля диалога.  
Пресеты хранятся в файлах `*.preset` и являются Lua-файлами.

Создать новый пресет можно нажав `Shift+F4` или `Ins`.

Над пресетами в списке доступны следующие действия:

- `Enter` - заполнить поля диалога значениями из пресета.
- `F4` - открыть в редакторе.
- `F5` - скопировать, `F6` - переименовать.
- `F8` или `Del` - удалить.

В списке отображаются только пресеты, подходящие для текущей конфигурации диалога:  
если в пресете содержится параметр, не имеющий соответствия в диалоге текущей конфигурации,
то такой пресет показан не будет.

Нажатием `Ctrl+H` можно принудительно отобразить все пресеты.

См. также: [обзор пресетов] для сервисов совместимых с __OpenAI API__.

[Пресеты]: #Presets


Установка {#Install}
=========

- Содержимое архива разместить в отдельной директории, где-то в `Macros/scripts`.
- Для [LuaShell] -- стандартным образом, т.е. где-то в `Macros/utils`,
  или в любой другой директории, доступной через `%PATH%`.
- Для работы с сетью непосредственно, через "нативные" конфигурации, такие как `openai.lua.cfg`,
  необходимы следующие модули:
    - `LuaSocket`, `LuaSec`: https://github.com/FarManagerLegacy/LuaBinaries/releases  
      и их зависимости: [OpenSSL], [MS Visual C++ Redist].
    - Практически любой JSON модуль, предоставляющий функции `encode`/`decode`.  
      - По умолчанию ищется модуль с одним из имён: `cjson`, `rsjson`, `ljson`, `dkjson`, `lunajson`, или просто [`json`]
        (см. также [lua-users wiki]).  
        Мною тестировались [Lua CJSON][LuaBinaries] и [`dkjson`].
      - Для явного указания имени модуля следует использовать опцию `json_module` в начале скрипта.  
        Её можно изменить прямо в коде, либо воспользоваться возможностями [ScriptsBrowser]/`cfgscript`.
- Также можно работать через [сторонние утилиты][Обзор утилит]:
  - Для запуска утилит рекомендуется модуль [Piper](https://forum.farmanager.com/viewtopic.php?p=167895#p167895)
    (положить в `modules`).  
    В случае его отсутствия для запуска будет использована стандартная функция [`io.popen`], в сочетании  
    с созданием временных файлов и перенаправлением их в стандартный ввод посредством команд shell.
  - В `%PATH%` должны быть __утилиты__, соответствующие имеющимся файлам __определений__ (\*.lua.cfg),
    см. раздел [Обзор утилит].
- При работе с [профилями][профили], чтобы при удалении профиля очищалась и связанная с ним история,
  опционально можно установить модуль [LuaSQLite3](https://lua.sqlite.org/),
  который присутствует например в дистрибутиве плагина [Polygon].


Настройка
---------

Большая часть _конфигураций_ требует задания некоторых параметров в [диалоге][Диалог].  
Наиболее важные параметры - такие как `apibase`, `apikey` и `model` - определяются выбранным [сервисов][Обзор сервисов].

Некоторые _утилиты_ используют файл настройки, доступный как из **диалога**, так и в [списке конфигураций][Провайдеры]
(подробнее см. в документации соответствующих утилит).

[Установка]: #Install
[Настройка]: #Install
[LuaShell]: https://forum.farmanager.com/viewtopic.php?f=15&t=10907
[`io.popen`]: https://www.lua.org/manual/5.1/manual.html#pdf-io.popen
[OpenSSL]: https://github.com/FarManagerLegacy/LuaBinaries/blob/main/OpenSSL.md
[MS Visual C++ Redist]: https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#latest-microsoft-visual-c-redistributable-version
[ScriptsBrowser]: https://forum.farmanager.com/viewtopic.php?f=15&t=10418
[LuaBinaries]: https://github.com/FarManagerLegacy/LuaBinaries/
[`dkjson`]: http://dkolf.de/dkjson-lua/
[`json`]: https://luarocks.org/search?q=json
[lua-users wiki]: http://lua-users.org/wiki/JsonModules
[Polygon]: https://github.com/shmuz/far_plugins/releases?q=Polygon&expanded=true


Меню выбора конфигурации провайдера {#ProvidersMenu refsTitle="Меню выбора провайдера"}
===================================

В комплекте идут __конфигурации__ для ряда опробованных мной утилит/сервисов
(но легко добавить и новые).

С некоторыми соображениями по выбору конфигурации можно ознакомиться в разделе [Обзор сервисов].

- Выбор конфигурации осуществляется через __меню__, доступное как прямо из [диалога][Диалог],
  так и отовсюду посредством макроса.  
  Выбор запоминается.
- Верхний раздел списка содержит "нативные" конфигурации, работающие с сетью средствами Lua.  
  Раздел не будет отображаться, если отсутствуют необходимые модули, см. [Установка].  
  Стандартные конфигурации (см. [обзор][Обзор сервисов]):
  _OpenAI-compatible_, _Google Gemini_, _Cohere_.
- Нижний раздел списка содержит определения, использующие внешние утилиты (см. обзор ниже).  
  По умолчанию список содержит только установленные утилиты, полный список -- по `Ctrl+H`.
  - Утилиты необходимо скачать самостоятельно (соответствующий сайт открывается по `Alt+F1` из меню).
  - Утилитам может требоваться настройка (помимо параметров в диалоге),
    подробнее см. в их собственной документации.  
    Быстрый доступ к **файлу** с настройками (если применимо) - из меню по `F4`,
    или в [диалоге][Диалог] по кнопке `[ Utility cfg ]`.
- По `Alt+F4` - быстрый доступ к файлу с __определением__ той или иной конфигурации (\*.lua.cfg).

В общем случае следует отдать предпочтение "нативным" конфигурациям, поскольку они обеспечивают больше возможностей.

Однако в некоторых случаях может оказаться проще или удобнее работать и через утилиты, например:

- если соответствующая утилита уже есть (и используется из командной строки);
- если утилита уже содержит настройки провайдеров (как `bito`, `gh models`, `tgpt`, `pytgpt`);
- если пользователю проще скачать утилиту, чем выполнить другие инструкции по [установке][Установка].


Обзор утилит
------------

- [bito] - настройка описана [тут](https://forum.farmanager.com/viewtopic.php?t=13283).  
  Недостаток: бесплатный лимит 75 сообщений в день, доступ только к BASIC-модели (gpt-4o-mini).
- [Gemini CLI] - ещё один способ доступа к моделям от [Google].  
  В отличии от других вариантов бесплатно предоставляется доступ к `gemini-2.5-pro` (до 1000 запросов в день).  
  Простой логин через браузер.  
  Требуется [Node.js](https://nodejs.org/en/download).
- [gh models] - GitHub Models extension.  
  Инструкции по установке см. на домашней странице.  
  Необходим аккаунт GitHub. Действуют [лимиты](https://docs.github.com/en/github-models/prototyping-with-ai-models#rate-limits).
- [tgpt], [pytgpt] - не требуют предварительной настройки.  
  Недостаток: не гарантирована стабильность (иногда требуется обновление утилит).
- Прочие утилиты - [aichat], [chatgpt-cli], [mods], [sgpt], [smartcat] - работают с [OpenAI API] (и совместимыми).  
  Требуют задания некоторых параметров, прежде всего `apibase`, `apikey` и `model`.
  Их значения зависят от выбранного [сервиса][Обзор сервисов].  
  В зависимости от утилиты, параметры или надо установить через **файл** настроек (как описано выше),
  или они могут быть доступны сразу в [диалоге][Диалог],
  если они передаются как __аргументы__ командной строки, или через __переменные окружения__.  
  Для заполнения параметров в диалоге можно использовать [пресеты], идущие в комплекте (см. [обзор][Обзор пресетов]).

[Провайдеры]: #ProvidersMenu
[Обзор утилит]: #ProvidersMenu
[Gemini CLI]: https://github.com/google-gemini/gemini-cli
[gh models]: https://github.com/github/gh-models
[tgpt]: https://github.com/aandrew-me/tgpt
[pytgpt]: https://github.com/Simatwa/python-tgpt
[bito]: https://bito.ai/
[aichat]: https://github.com/sigoden/aichat
[chatgpt-cli]: https://github.com/kardolus/chatgpt-cli
[mods]: https://github.com/charmbracelet/mods
[sgpt]: https://github.com/tbckr/sgpt
[smartcat]: https://github.com/efugier/smartcat
[OpenAI API]: https://platform.openai.com/docs/api-reference


Обзор онлайн-сервисов {#Services}
=====================

[Обзор сервисов]: #Services

Выбор модели
------------

На данный момент наиболее сильные модели это:

- `gpt-5`, `gpt-4.1`, `gpt-4o`, `o4`, `o3`, `o1` (а также модели с суффиксами `-mini`) от [OpenAI];
- `gemini-2.5-pro` от [Google];
- `claude-opus-4`, `-sonnet-4` от [Anthropic];
- `grok-4` от [xAI];

Из опенсорсных - все что побольше, например:

- `gpt-oss-120b` от OpenAI;
- из серии [Llama] от [Meta AI]: `llama-4-maverick`, `llama-3.1-405b`, `llama-3.2-90b`, `llama-3.3-70b`;
- ряд моделей от китайских разработчиков также демонстрирует хорошие результаты:
  [DeepSeek], [Qwen] от _Alibaba_, [GLM-4.5] от [Zhipu AI], [Kimi] _K2_ от [Moonshot AI], [Baidu] _ERNIE_,
  [MiniMax], _Yi_ от [01.AI].

Ориентироваться можно по рейтингу [LMArena](https://lmarena.ai/leaderboard).

[OpenAI]: https://platform.openai.com/
[Google]: https://ai.google.dev/
[Anthropic]: https://www.anthropic.com/
[xAI]: https://x.ai/grok
[Llama]: https://www.llama.com/
[Meta AI]: https://ai.meta.com/
[DeepSeek]: https://www.deepseek.com/
[Qwen]: https://qwenlm.github.io/
[Zhipu AI]: https://zhipuai.cn/en/
[GLM-4.5]: https://z.ai/
[Kimi]: https://www.kimi.com/
[Moonshot AI]: https://www.moonshot.ai/
[Baidu]: https://ernie.baidu.com/blog/
[MiniMax]: https://www.minimaxi.com/en
[01.AI]: https://www.01.ai/


Обзор провайдеров
-----------------

- [OpenAI] -- оригинальный разработчик _ChatGPT_.  
  Новому пользователю предоставляется кредит $5, после исчерпания которого доступно только платное использование.  
  Работа с этим апи возможна как с помощью сторонних утилит, так и с помощью "нативной" конфигурации,
  так и называющейся "_OpenAI-compatible_".
- Другие _OpenAI_-совместимые: [Mistral AI], [xAI] _Grok_, [AI21 labs] _Jamba_.  
  К этой же категории относится целый ряд провайдеров, предоставляющих доступ к OpenSource-моделям.
- Провайдеры с собственным API, такие как [Google] _Gemini_, [Anthropic] _Claude_, [Cohere] _Command_ и т.д.  
  Для поддержки в _AskAI_ требуется или соответствующая "нативная" конфигурация, или специальный
  сервис-адаптер, который будет конвертировать API в совместимый с _OpenAI_ формат.  
  Примеры таких сервисов: [openai-gemini], [openai-github-copilot] и др.

[Mistral AI]: https://mistral.ai/
[AI21 labs]: https://www.ai21.com
[Cohere]: https://cohere.com/command
[openai-gemini]: https://habr.com/ru/articles/798123/
[openai-github-copilot]: https://habr.com/ru/articles/799215/


Обзор [пресетов][Пресеты] для сервисов совместимых с [OpenAI API]
-----------------------------------------------------------------

В комплекте со скриптом идёт набор пресетов, содержащих предварительно заданные
значения `apibase` (и начальное значение `model`).  
В большинстве случаев пользователю также требуется самостоятельно получить `apikey`,
адрес сайта для регистрации можно найти в файле пресета (открывается из списка по `F4`).

С перечисленными ниже пресетами помимо конфигурации `openai.lua.cfg` совместимы также
конфигурации некоторых утилит (кроме тех, которые хранят эти значения в собственных файлах настроек).

- Не требуют ключа (`apikey`) только эти пресеты:
   - [pollinations.ai] (OpenAI, Gemini, DeepSeek, Qwen, Mistral, Llama, [...](https://text.pollinations.ai/models))
   - `tmrace` (`gpt-4o-mini`): лимит 50 запросов в сутки
   - [api.airforce]\: лимит 1 запрос в минуту, 500 в сутки
   - [g4f.*]\: GPT4Free
   - [deepinfra] (всевозможные OpenSource модели): some anonymous usage allowed
- Для использования других надо зарегистрироваться и получить ключ.
  Следующие пресеты относятся к бесплатным сервисам (с определёнными лимитами):
   - [cloudflare] (`@cf/openai/gpt-oss-120b`, `@cf/meta/llama-3.3-70b-instruct-fp8-fast`,
     `@cf/deepseek-ai/deepseek-r1-distill-qwen-32b` и модели поменьше)
   - [cohere] (серии `command-*` и `c4ai-aya-*`)
   - [gemini] от _Google_
   - [github-copilot] (модели от _OpenAI_, _Anthropic_, _Google_)
   - [github-models] (модели от _Cohere_, _DeepSeek_, _Meta_, _Mistral AI_, _Microsoft_, _OpenAI_, _xAI_ и др.)
   - [groq] (модели до 120b)
   - [mistral], [codestral]
   - [nvidia] (OpenSource-модели: DeepSeek, gpt-oss, Llama, Qwen и др.)
   - [sambanova] (Llama, DeepSeek, Qwen)
   - [vercel] (модели от _Alibaba_ Qwen, _Amazon_, _Anthropic_, _Cohere_, _DeepSeek_, _Google_,
     _Meta_, _Mistral AI_, _Moonshot AI_, _OpenAI_, _xAI_, _Zhipu AI_ и др.)  
     Для регистрации требуется привязка кредитной карты.  
     Free-аккаунты получают ежемесячно кредит $5.
     Некоторые модели бывают доступны бесплатно, в настоящий момент это `meituan/longcat-flash-chat`.
- На некоторых сервисах только часть моделей доступна бесплатно:
   - [chutes] (бесплатно - небольшие модели `openai/gpt-oss-20b`, `zai-org/GLM-4.5-Air`, `Qwen/Qwen3-Coder-30B-A3B-Instruct`, ...)
   - [openrouter] (до 50 запросов в день к бесплатным ":free" моделям,
     в том числе от Google, а также `llama`, `deepseek`, `qwen` и др.;  
     покупкой 10 кредитов лимит можно увеличить до 1000 запросов в день)
   - [siliconflow] (бесплатно - небольшие модели)
- Некоторые сервисы дают возможность бесплатно пользоваться только сайтом, но в некоторых случаях возможно
  задействовать их приватный API (указав Cookie и/или другие требуемые данные в заголовках):
   - [cerebras] (`gpt-oss-120b`, и несколько моделей _Llama_, _Qwen_)
   - [featherless] (бесплатно - огромное количество моделей <15B)
   - [fireworks.ai] (всевозможные OpenSource-модели)
   - [lepton] (`llama3-3-70`, ..., `mixtral-8x7b` и др.)
- Для полноты: пресеты для некоторых сервисов, для которых доступны пробные ключи:
   - [ai21] (Jamba): $10 credit, 3mo trial
   - [deepbricks] (o1/o3/o4/gpt-5/.../claude/deepseek/gemini/llama): allows some usage with 0 balance
   - [grok] от [xAI]
   - [huggingface] (OpenSource-модели): $0.1 monthly
   - [hyperbolic] (OpenSource-модели: DeepSeek, Llama, Qwen): $10 credit for free trial
   - [ncompass] (OpenSource-модели: Llama, Qwen, ...): $1 free credits
   - [novita.ai] (OpenSource-модели): $0.5 credit

Кроме того:

- `github-copilot-`/`gemini-proxy-public` позволяют попробовать соответствующие сервисы-адаптеры, упомянутые выше.  
  Примечание: `gemini` [с некоторых пор](https://developers.googleblog.com/en/gemini-is-now-accessible-from-the-openai-library/)
  доступен и через OpenAI API.
- `keepass` позволяет держать свои собственные пресеты в базе [KeePass](https://keepass.info/).  
  Подобным образом можно организовать работу и с другими аналогичными утилитами.

[ai21]: https://www.ai21.com/jamba
[api.airforce]: https://api.airforce
[cerebras]: https://cloud.cerebras.ai/
[chutes]: https://chutes.ai/app
[codestral]: https://console.mistral.ai/codestral
[cloudflare]: https://developers.cloudflare.com/workers-ai/models/
[deepbricks]: https://deepbricks.ai/pricing
[deepinfra]: https://deepinfra.com/models/text-generation
[featherless]: https://featherless.ai/models
[fireworks.ai]: https://fireworks.ai/models
[gemini]: https://ai.google.dev/gemini-api/docs/openai
[github-copilot]: https://docs.github.com/en/copilot/get-started/what-is-github-copilot
[github-models]: https://github.com/marketplace?type=models&task=chat-completion
[g4f.*]: https://g4f.dev/
[grok]: https://console.x.ai/
[groq]: https://console.groq.com/playground
[huggingface]: https://huggingface.co/models?pipeline_tag=text-generation&inference_provider=fireworks-ai,cerebras,together,novita,nebius,groq,hyperbolic,nscale,cohere,sambanova,hf-inference&sort=trending
[hyperbolic]: https://app.hyperbolic.xyz/models
[lepton]: https://www.lepton.ai/playground
[mistral]: https://docs.mistral.ai/getting-started/models/models_overview/
[ncompass]: https://www.ncompass.tech/about
[novita.ai]: https://novita.ai/model-api/product/llm-api
[nvidia]: https://build.nvidia.com/
[openrouter]: https://openrouter.ai/models?q=:free
[pollinations.ai]: https://pollinations.ai/
[sambanova]: https://cloud.sambanova.ai/pricing
[siliconflow]: https://docs.siliconflow.cn/reference/chat-completions-1
[vercel]: https://vercel.com/ai-gateway

[Обзор пресетов]: #Services

- - -

**Примечание**: задача перечислить все существующие сервисы не ставилась, это попросту невозможно,
не говоря о том, что каждый день могут появляться новые.

Помимо самостоятельных провайдеров, можно встретить также сервисы не вполне понятного происхождения,
не имеющие даже официального сайта. Такими в списке выше являются `tmrace` и `api.airforce`.

По причине их неопределённого статуса пользоваться ими следует с осторожностью и не передавать чувствительные данные!

Подобных сервисов довольно много, некоторые например перечислены тут: [cool ai stuff!](https://cas.zukijourney.com/)

---
refsTemplate: refsBottom
links: https://github.com/FarManagerLegacy/AskAI | [Скачать](https://github.com/FarManagerLegacy/AskAI/zipball/master)
...
