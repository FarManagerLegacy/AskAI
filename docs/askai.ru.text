<!--HLF:
     Language = Russian,Russian (Русский);
     PluginContents = Ask AI;
    TopicHeading = h6;
    Margin = 1;
    IndentCode = 4;
     IndentList = 0;
    IndentPara = 0;
    IndentQuote = 4;
    PlainCode = false;
    PlainHeading = false;
    CenterHeading = false;
     EmptyLinesBeforeTopic = 2;
    EmptyLinesAfterHeading = 1;
     EmptyLinesBeforeHeading = 2;
    HighlightListBullet = true;
    HighlightListNumber = true;
-->

<!--
.Options CtrlStartPosChar=^|
v0.1
-->

Ask AI -- макрос для взаимодействия с ChatGPT (и другими LLM-сервисами) в FAR {#Contents refsTitle="Основные функции"}
============================================================================

Этот макрос -- дальнейшее развитие **bito.ai code assistant** ([см.](https://forum.farmanager.com/viewtopic.php?t=13283)),
с поддержкой множества утилит и LLM-сервисов,  
и возможностью настройки разнообразных параметров.

Макрос назначен на `Ctrl+B`. Также может быть запущен в качестве скрипта [LuaShell].

`Ctrl+B:Double` позволяет в любой момент открыть окно с выводом повторно.

_Функции:_

- Ввод __запроса__ в диалоге, ранее набранные приглашения доступны в истории поля ввода.  
  В __диалоге__ доступны также такие действия:
  - (Опциональная) возможность работы __в единой сессии__, с сохранением предыдущего контекста.  
    Состояние `[?]` означает что сессия продолжается пока открыт редактор с выводом.  
    Сессию также можно в любой момент __обнулить__ кнопкой "`-`".
  - __Форматирование вывода__, по заданной границе, или по ширине окна (состояние `[?]`).  
    Примечание: блоки кода не форматируются.
  - Установка различных __параметров__ генерации (в зависимости от используемой утилиты).  
    Значения запоминаются в истории, и легко доступны для повторного выбора.  
    Некоторые параметры специфичны для отдельной утилиты, другие могут разделяться между разными
    (посредством общей истории).
  - Значения параметров в диалоге можно не только менять по одному, но и подставлять сразу набором ("пресетом").  
    [Список пресетов] открывается нажатием соответствующей кнопки, хоткеем, или же по `F5`.
  - Список __моделей__ может быть как задан предварительно, так и запрашиваться через API динамически,
    если это предусмотрено конфигурацией - в этом случае в диалоге доступна кнопка __Models - F6__.
  - Набор параметров легко меняется через файлы __определений__ (\*.lua.cfg), доступные прямо из диалога.
  - Некоторые утилиты держат свою __конфигурацию в собственных файлах__,
    открыть такой конфиг-файл тоже можно прямо из диалога.
  - Возможность установки __переменных окружения__, необходимых для отдельных утилит.
- Вместе с запросом передаётся __выделенный в редакторе текст__.  
  Если в запросе присутствует шаблон `{{%input%}}`, то он заменяется выделенным текстом.  
  В противном случае текст выбранный в редакторе добавляется в конец запроса.

_Дополнительные макросы_, активные в окне с выводом:

- `Ctrl+Shift+Ins`:
  - скопировать выделенный текст, склеив свёрнутые строки обратно в параграфы;
  - при отсутствии выделения ищет и обрабатывает блок кода под курсором.
- `Alt+F2` полностью убрать форматирование (свёртку).

Доступ к сервисам реализуется посредством (произвольных) консольных утилит,
либо напрямую через [OpenAI API] (опционально), см. раздел [Установка].

Каждый из LLM-сервисов имеет свои достоинства и недостатки, поэтому [выбор](#Utilities) остаётся за пользователем.  

[Диалог]: #Contents


Работа с пресетами {#Presets}
------------------

Список пресетов вызывается из [диалога][Диалог] нажатием соответствующей кнопки, хоткеем, или же по `F5`.

"Пресет" представляет собой именованный набор параметров, подставляемых в соответствующие поля диалога.  
Пресеты хранятся в файлах `*.preset` и загружаются как lua-файлы.

Создать новый пресет можно нажав `Shift+F4` или `Ins`.

Над пресетами в списке доступны следующие действия:

- `Enter` - заполнить поля диалога значениями из пресета.
- `F4` - открыть в редакторе.
- `F5` - скопировать, `F6` - переименовать.
- `F8` или `Del` - удалить.

В списке отображаются только пресеты, подходящие для текущей конфигурации диалога:  
если в пресете будет какой-то параметр, а в диалоге соответствующего поля не окажется,
то пресет показан не будет.

Нажатием `Ctrl+H` можно принудительно отобразить все пресеты.

[Список пресетов]: #Presets


Установка {#Install}
=========

- Содержимое архива разместить в отдельной директории, где-то в `Macros/scripts`.
- Для [LuaShell] -- стандартным образом, т.е. где-то в `Macros/utils`,
  или в любой другой директории, доступной через `%PATH%`.
- Для запуска утилит рекомендуется модуль [Piper](https://forum.farmanager.com/viewtopic.php?p=167895#p167895)
  (положить в `modules`).  
  В случае его отсутствия для запуска будет использована стандартная функция [`io.popen`], в сочетании  
  с созданием временных файлов, и перенаправлением их в стандартный ввод посредством команд shell.
- В `%PATH%` должны быть [утилиты](#Utilities), соответствующие имеющимся файлам __определений__ (\*.lua.cfg),  
  см. раздел [Меню выбора утилиты](#UtilitiesMenu).
- (Опционально) Для доступа к сервисам, использующим _REST API_ совместимый с [OpenAI],
  служит конфигурация `lua-openai.lua.cfg`.  
  Для работы с сетью необходимы такие модули:
    - `LuaSocket`, `LuaSec`: https://github.com/FarManagerLegacy/LuaBinaries/releases  
      и их зависимости: [OpenSSL], (для некоторых билдов) [MS Visual C++ Redist].
    - Практически любой JSON модуль, предоставляющий функции `encode`/`decode`.  
      - По умолчанию ищется модуль с одним из имён: `cjson`, `rsjson`, `ljson`, `dkjson`, `lunajson`, или просто [`json`]
        (см. также [lua-users wiki]).  
        Мною тестировались [Lua CJSON][LuaBinaries] и [`dkjson`].
      - Для явного указания имени модуля следует использовать опцию `json_module` в начале скрипта.  
        Её можно изменить прямо в коде, либо воспользоваться возможностями [ScriptsBrowser]/`cfgscript`.

[OpenSSL]: https://slproweb.com/products/Win32OpenSSL.html
[MS Visual C++ Redist]: https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#latest-microsoft-visual-c-redistributable-version
[ScriptsBrowser]: https://forum.farmanager.com/viewtopic.php?f=15&t=10418

[LuaBinaries]: https://github.com/FarManagerLegacy/LuaBinaries/
[`dkjson`]: http://dkolf.de/dkjson-lua/
[`json`]: https://luarocks.org/search?q=json
[lua-users wiki]: http://lua-users.org/wiki/JsonModules


Настройка
---------

Большая часть утилит требует задания некоторых параметров.

В частности, при использовании сервисов c [OpenAI]-совместимым API
важны параметры `api key` и `api base`,
их значения можно узнать на сайте соответствующих провайдеров.

В зависимости от утилиты, параметры надо установить или через конфиг-файл
(`F4` в списке [выбора](#UtilitiesMenu)),
или как __аргументы__ командной строки (доступные в [диалоге][Диалог]),
или через __переменные окружения__ (также доступны в [диалоге][Диалог]).

[OpenAI API]: https://platform.openai.com/docs/api-reference
[LuaShell]: https://forum.farmanager.com/viewtopic.php?f=15&t=10907
[`io.popen`]: https://www.lua.org/manual/5.1/manual.html#pdf-io.popen
[Установка]: #Install
[Настройка]: #Install


Меню выбора утилиты {#UtilitiesMenu}
===================

  В комплекте идут __определения__ для нескольких опробованных мной утилит/сервисов,
  но легко добавить новые.

  - Выбор утилиты осуществляется через __меню__, доступное как прямо из [диалога][Диалог],
    так и отовсюду посредством макроса.  
    Выбор запоминается.  
    По умолчанию список содержит только установленные утилиты, полный список -- по `Ctrl+H`.
  - Утилиты необходимо скачать самостоятельно (соответствующий сайт открывается по `Alt+F1` из меню).  
    С некоторыми соображениями по выбору утилиты можно ознакомиться [тут](#Utilities).
  - Утилитам может требоваться [настройка] помимо параметров в диалоге,
    подробнее см. в собственной их документации.  
    Быстрый доступ к файлу конфигурации (если применимо) - `F4` в меню, или по кнопке в [диалоге][Диалог].
  - По кнопке `Alt+F4` - быстрый доступ к файлу с __определением__ той или иной утилиты (\*.lua.cfg)


Обзор поддерживаемых утилит {#Utilities}
===========================


Не требующие начальной настройки
--------------------------------

[tgpt], [pytgpt]

Недостаток: не гарантирована стабильность (иногда требуется обновление утилит).


Официальные утилиты от поставщика API
-------------------------------------

[bito]

Настройка описана [тут](https://forum.farmanager.com/viewtopic.php?t=13283).

Недостаток: бесплатный лимит 20 сообщений в день.


Утилиты, работающие с OpenAI API (и совместимыми)
-------------------------------------------------

[aichat],
[chatgpt-cli],
[mods],
[sgpt]
или напрямую через сеть (требуется [Установка] соответствующих lua-модулей).

Для их использования важны параметры `api key` и `api base`,
их значения можно узнать на сайте соответствующих провайдеров.

См. также раздел [Настройка].


### OpenAI

[OpenAI] -- оригинальный разработчик ChatGPT, `gpt-3.5-turbo`, `gpt-4`.

Предоставляется начальный кредит $5, после исчерпания доступно только платное использование.


### Совместимые

Например:

- [groq]
  - api: `https://api.groq.com/openai/v1`
  - модели: https://console.groq.com/docs/models
- [OpenRouter]  
  - api: `https://openrouter.ai/api/v1`
  - целый ряд бесплатных [моделей](https://openrouter.ai/docs/models) (присутствуют ограничения):
    <https://openrouter.ai/models?q=:free>
- [Lepton AI](https://www.lepton.ai/playground)

Существуют и другие провайдеры, предоставляющие совместимый интерфейс.

В том числе, возможна локальная работа ([LocalAI] и др.), но аппаратные требования высокие.


### Адаптеры

Есть множество сервисов, преобразующих к формату OpenAI какие-либо другие варианты
доступа к моделям.

Ниже приводятся два примера:

- [openai-gemini]\: Google Gemini -- официально и бесплатно!
- [openai-github-copilot]\: Github Copilot -- доступ к `gpt-4`, для ряда категорий пользователей бесплатно (см.)


[tgpt]: https://github.com/aandrew-me/tgpt
[pytgpt]: https://github.com/Simatwa/python-tgpt

[bito]: https://bito.ai/

[aichat]: https://github.com/sigoden/aichat
[chatgpt-cli]: https://github.com/kardolus/chatgpt-cli
[mods]: https://github.com/charmbracelet/mods
[sgpt]: https://github.com/tbckr/sgpt

[OpenAI]: https://platform.openai.com/
[groq]: https://console.groq.com/playground
[OpenRouter]: https://openrouter.ai/
[LocalAI]: https://github.com/mudler/LocalAI

[openai-gemini]: https://habr.com/ru/articles/798123/
[openai-github-copilot]: https://habr.com/ru/articles/799215/

<!--
https://github.com/PublicAffairs/openai-gemini
https://gitea.com/PublicAffairs/openai-github-copilot
-->

---
refsTemplate: refsBottom
...
