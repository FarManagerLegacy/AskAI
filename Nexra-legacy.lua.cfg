name = "Nexra ChatGPT / no stream"
url = "https://aryahcr.cc/chat/en"

local U = ...
if not U.restapi then return end
exe = true

historyName = name

predefined = {
  model={
    "gptweb",
    "gpt-4",
    "gpt-4-0613",
    --"gpt-4-32k",
    "gpt-4-0314",
    --"gpt-4-32k-0314",
    "gpt-3.5-turbo",
    --"gpt-3.5-turbo-16k",
    "gpt-3.5-turbo-0613",
    --"gpt-3.5-turbo-16k-0613",
    "gpt-3.5-turbo-0301",
    "text-davinci-003",
    "text-davinci-002",
    "code-davinci-002",
    "gpt-3",
    "text-curie-001",
    "text-babbage-001",
    "text-ada-001",
    "davinci",
    "curie",
    "babbage",
    "ada",
    "babbage-002",
    "davinci-002",
  },
  conversation_style={ -- for Bing
    "", "Balanced", "Creative", "Precise",
  },
  --markdown={"","true"},
  websearch={"","true"}, -- for Blackbox
}

local function getMsgText (data)
  return data.message or data.detail or data.error
end

--https://nexra.aryahcr.cc/documentation/en
return function (session, context, user, secret, model, role)
  local client = U.restapi.LinesStream(nil, "https://nexra.aryahcr.cc/api", {
    ["x-nexra-user"]=user,    -- user-xxxxxxxx
    ["x-nexra-secret"]=secret,-- nx-xxxxxxx-xxxxx-xxxxx
  })
  function client:is_valid_final (parsed)
    return parsed.gpt
  end

  local messages = session and U.getHistory(historyName) or {}
  local data = {
    prompt=context,
    messages=messages,
    model=model,
    --markdown=boolean(markdown),
  }
  if role then
    if messages[1] and messages[1].role=="system" then
      messages[1].content = role
    else
      table.insert(messages, 1, {role="system", content=role})
    end
  end

  return function (cb)
    local endpoint = "/chat/gpt"
    if model=="gptweb" then
      endpoint = "/chat/gptweb"
    end
    local response,statusline,errResponse = client:generate(endpoint, data)
    if type(errResponse)=="string" and errResponse:match"^_{" then
      response = U.json.decode(errResponse:sub(2))
    end
    if response then
      table.insert(messages, {role="user", content=context})
      table.insert(messages, {role="assistant", content=response.gpt})
      cb(response.gpt)
    else
      cb(U.formatErrMsg(statusline,errResponse,"\n\n",getMsgText))
    end
    cb()
  end
end
