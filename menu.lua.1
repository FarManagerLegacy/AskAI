local Shared = ... -- name, askAI
local State = Shared.State
local utils = Shared.utils
local cfgpath = Shared.cfgpath
local F = far.Flags
F.FMENU_SHOWSHORTBOX = F.FMENU_SHOWSHORTBOX or 0 -- not recent far2m
F.FMENU_SHOWSINGLEBOX = F.FMENU_SHOWSINGLEBOX or 0

local function toggleHidden (items)
  for _,item in ipairs(items) do
    if item.hidden~=nil then
      item.hidden = not item.hidden
    end
  end
end

local function chooseCfg (profile, prompt, curcfgfile)
  if State.isDlgOpened then return end
  local items1,items2 = {visibleN=0}, {visibleN=0}
  local empty = true
  local hk = utils.HK.new(".")
  far.RecursiveSearch(cfgpath, "*.lua.cfg>>D", function (file, pathname)
    local success, cfg = pcall(utils.loadCfg, pathname, file.FileName)
    if not success then
      far.Message(cfg,"Error loading "..file.FileName,nil,"wl")
      return nil
    end
    empty = empty and not cfg.reachable
    local items = type(cfg.info.exe)=="string" and items2 or items1
    if cfg.reachable then items.visibleN = items.visibleN+1 end
    table.insert(items, {
      hidden = file.FileAttributes:find"h" or not cfg.reachable or nil,
      grayed = not cfg.reachable,
      selected = file.FileName==curcfgfile,
      FileName = file.FileName,
      pathname = pathname,
      cfg = cfg,
    })
    return nil
  end)
  if #items1 + #items2 == 0 then
    far.Message("No config found", Shared.name, nil ,"w")
    return
  end
  local function sortFn (a, b)
    return a.FileName:lower() < b.FileName:lower()
  end
  table.sort(items1, sortFn)
  table.sort(items2, sortFn)
  local items = items1
  local notBothGroupsPresent = items1.visibleN==0 or items2.visibleN==0 or nil
  table.insert(items, {separator=true, hidden=notBothGroupsPresent, grayed=notBothGroupsPresent})
  for _,item in ipairs(items2) do
    item.checked = utf8.char(0xf4b5) -- "" nf-oct-command_palette
    table.insert(items, item)
  end
  for _,item in ipairs(items) do
    if not item.separator then
      item.text = hk:iter(item.hidden~=nil).." "..item.cfg.info.name
    end
  end
  if empty then
    toggleHidden(items)
  end
  --
  local props = {
    Title="Choose provider",
    Bottom="F4, Alt+F4, Ctrl+H, Alt+F1, F1",
    HelpTopic=utils.HelpTopic "UtilitiesMenu",
    Id=win.Uuid("7EF7D50A-9CF2-4053-97E5-041C39DE1774"),
  }
  if profile~="default" then
    props.Title = props.Title.." - "..profile
  end
  local bkeys = "Enter CtrlEnter F4 AltF4 CtrlH AltF1"
  repeat
    State.isDlgOpened = true
    local item, pos = far.Menu(props, items, bkeys)
    State.isDlgOpened = false
    if item then
      local bk = item.BreakKey
      item = items[pos]
      local info = item.cfg.info
      if bk=="Enter" or bk=="CtrlEnter" or not bk then
        if item.grayed then
          if info.url then
            utils.open(info.url)
          end
        else
          if bk~="CtrlEnter" then
            utils.msave(profile, "cfgfile", item.FileName)
          end
          return Shared.askAI(prompt, profile, item.cfg)
        end
      elseif bk=="CtrlH" then
        toggleHidden(items)
      elseif bk=="F4" then
        if info.config then
          editor.Editor(info.config)
        end
      elseif bk=="AltF4" then
        if F.EEC_MODIFIED==editor.Editor(item.pathname) then
          return chooseCfg(profile, prompt, item.FileName)
        end
      elseif bk=="AltF1" then
        if info.url then
          utils.open(info.url)
        end
      end
    end
    props.SelectIndex = pos
  until not item
end

local function chooseModel (getModels, args, fromHistory)
  local models, argName = getModels(args) --not safe
  if models and models[1] then
    local keyId = type(models[1])=="table" and models.keyId
    local filterFn, nameFn = models.filterFn, models.nameFn
    local current = args[argName or "model"]
    local items = {}
    for i,model in ipairs(models) do
      local id = nameFn and nameFn(model) or not keyId and model or model[keyId] --not safe
      assert(type(id)=="string", "model id must be string")
      local hidden = filterFn and not filterFn(model,models) or nil --not safe
      items[i] = {
        text=id,
        hidden=hidden,
        grayed=hidden,
        selected=id==current,
        model=model,
      }
    end
    local props = {
      Title=fromHistory and "Models {from history}" or "Available models",
      Bottom="Enter to choose",
      HelpTopic=utils.HelpTopic"",
      Id=win.Uuid "2E982903-4E60-4A44-8E78-2543ED869A63",
      Flags=F.FMENU_SHOWSHORTBOX +F.FMENU_SHOWSINGLEBOX,
    }
    local bkeys = "CtrlH" --undoc
    if pcall(require,"le") then
      bkeys = bkeys.." F3"
    end
    table.sort(items, function(a,b) return a.text:lower() < b.text:lower() end)
    repeat
      local ret,pos = far.Menu(props,items,bkeys)
      if ret then
        if not ret.BreakKey then
          return ret.text, argName
        end
        props.SelectIndex = pos
        local item = items[pos]
        if ret.BreakKey=="CtrlH" then
          toggleHidden(items)
        elseif item and ret.BreakKey=="F3" then
          require"le"(item.model)
        end
      end
    until not ret
  end
end

return {
  chooseCfg=chooseCfg,
  chooseModel=chooseModel,
}
