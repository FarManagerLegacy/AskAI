local Shared = ...
local F = far.Flags
F.FMENU_SHOWSHORTBOX = F.FMENU_SHOWSHORTBOX or 0 -- not recent far2m
F.FMENU_SHOWSINGLEBOX = F.FMENU_SHOWSINGLEBOX or 0

local function toggleHidden (items)
  for _,item in ipairs(items) do
    if item.hidden~=nil then
      item.hidden = not item.hidden
    end
  end
end

local function chooseModel (getModels, args, fromHistory)
  local models, argName = getModels(args) --not safe
  if models and models[1] then
    local keyId = type(models[1])=="table" and models.keyId
    local filterFn, nameFn = models.filterFn, models.nameFn
    local current = args[argName or "model"]
    local items = {}
    for i,model in ipairs(models) do
      local id = nameFn and nameFn(model) or not keyId and model or model[keyId] --not safe
      assert(type(id)=="string", "model id must be string")
      local hidden = filterFn and not filterFn(model,models) or nil --not safe
      items[i] = {
        text=id,
        hidden=hidden,
        grayed=hidden,
        selected=id==current,
        model=model,
      }
    end
    local props = {
      Title=fromHistory and "Models {from history}" or "Available models",
      Bottom="Enter to choose",
      HelpTopic=Shared.HelpTopic,
      Id=win.Uuid "2E982903-4E60-4A44-8E78-2543ED869A63",
      Flags=F.FMENU_SHOWSHORTBOX +F.FMENU_SHOWSINGLEBOX,
    }
    local bkeys = "CtrlH" --undoc
    if pcall(require,"le") then
      bkeys = bkeys.." F3"
    end
    table.sort(items, function(a,b) return a.text:lower() < b.text:lower() end)
    repeat
      local ret,pos = far.Menu(props,items,bkeys)
      if ret then
        if not ret.BreakKey then
          return ret.text, argName
        end
        props.SelectIndex = pos
        local item = items[pos]
        if ret.BreakKey=="CtrlH" then
          toggleHidden(items)
        elseif item and ret.BreakKey=="F3" then
          require"le"(item.model)
        end
      end
    until not ret
  end
end

return chooseModel
