local Shared = ... -- State, _tmp, name, cfgpath + O (transit)

local function mload (profile, key)
  local s, err = mf.mload("jd", Shared.name)
  if err then return nil, err end
  assert(type(s)=="table", "Error in settings")
  if not profile then return s end
  s = s[profile]
  if s and key then
    assert(type(s)=="table", "Error in profile")
    return s[key]
  end
  return s
end

local function msave (profile, key, value)
  local s
  if type(profile)~="string" then
    assert(type(profile)=="table")
    s = profile
  else
    s = mf.mload("jd", Shared.name) or {}
    if type(key)~="string" then
      assert(key==nil or type(key)=="table")
      s[profile] = key
    else
      local p = s[assert(profile)]
      if not p then
        p = {}
        s[profile] = p
      end
      p[key] = value
    end
  end
  assert(mf.msave("jd", Shared.name, s), "Error writing settings")
end

local path_sep = package.config:sub(1,1)
local function pathjoin (...) --same as win.JoinPath since Luafar 857
  local args = {...}
  assert(#args==select("#",...), "arg cannot be nil")
  return table.concat(args, path_sep)
end

local _isWindows = path_sep=="\\"

local expandEnv
if _isWindows then
  function expandEnv (path)
    return (path:gsub("%%([%w_]-)%%", win.GetEnv))
  end
else
  function expandEnv (path)
    if path:sub(1,1)=="~" then
      return win.GetEnv"HOME"..path:sub(2)
    end
    return path
  end
end

local function _quote (str)
  return '"'..str..'"'
end

local function _optional (...)
  if select("#", ...)==1 then
    return ... or ""
  end
  local key, value, arg = ...
  if not value then return "" end
  if arg then -- see bito.lua.cfg
    if type(arg)=="function" then
      value = arg(select(4, ...))
    else--if arg~='"' then??
      value = arg:format(value)
    end
  end
  return key.." ".._quote(value)
end

local todel = {}
local function cleanup()
  for _, pathname in ipairs(todel) do
    win.DeleteFile(pathname)
  end
  todel = {}
end

local function writeFile (pathname, content)
  local fp = assert(io.open(pathname, "w"))
  fp:write(content)
  fp:close()
end
local function _tmpfile (filename, content)
  local pathname = pathjoin(Shared._tmp, filename)
  writeFile(pathname, content)
  table.insert(todel, pathname)
  return '"'..pathname..'"'
end

local function check (key)
  repeat
    local k = win.ExtractKeyEx()
    if k and far.InputRecordToName(k)==key then return true end
  until not k
end

local function _pipeOut (exe, context)
  return function (args)
    args[0] = _quote(exe)
    local cmd = table.concat(args, " ", 0)
    if context then -- env
      cmd = (_isWindows and "type %s|" or "cat %s|"):format(_tmpfile("file.input", context))..cmd
    end
    return function (cb)
      if _isWindows then cmd = _quote(cmd) end
      local pipe = io.popen(cmd.." 2>&1", "r")
      repeat
        if check"Esc" then break end
        local chunk = pipe:read(5)
        if not chunk then break end
        while not chunk:isvalid() do --ensure valid utf-8
          local extra = pipe:read(1)
          if extra then chunk = chunk..extra; else break; end
        end
        cb(chunk)
      until false
      cb()
      pipe:close()
      cleanup()
    end
  end
end

if pcall(require, "piper") then
  local STILL_ACTIVE = 259
  local _shell = win.GetEnv"ComSpec".." /c"
  function _pipeOut (exe, context)
    return function (args)
      args[0] = _quote(exe)
      local cmd = table.concat(args, " ", 0)
      return function (cb)
        local prc = require"piper"(_shell.._quote(cmd), {input=context})
        if not prc then return end
        if prc.ExitCode==STILL_ACTIVE or prc.ExitCode==0 then
          for chunk in prc.utf8chunks do
            if check"Esc" then break end
            cb(chunk)
          end
          cb()
        else -- debug
          far.Message("ExitCode: "..prc.ExitCode.."\n\1\n"..prc.all:gsub("\r\n","\n"), Shared.name, nil, "wl")
        end
        cleanup()
      end
    end
  end
end

local function isReachable (fname, source)
  if fname==nil or type(fname)=="boolean" then return fname end
  local _type = type(fname)
  if _type~="string" then
    far.Message("exe: string or boolean expected, got ".._type, source, nil, "w")
    return
  end
  if not _isWindows then
    return 0==os.execute("which "..fname)
  end
  for ext in win.GetEnv("PATHEXT"):gmatch"%.[^;]+" do
    --https://learn.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-searchpathw
    local filename = win.SearchPath(nil,fname,ext)
    if filename then
      return not win.GetFileAttr(filename):find"d"
    end
  end
end

local open; do
  if win.ShellExecute then
    function open (url)
      win.ShellExecute(nil,nil,url)
    end
  else
    for _,fname in ipairs{"xdg-open","explorer.exe","open"} do
      if 0==os.execute("which "..fname) then
        function open (url)
          os.execute(("%s '%s'"):format(fname,url))
        end
        break
      end
    end
    open = open or function (url)
      far.Message(url,"")
    end
  end
end

local json_module = Shared.O.json_module
if not json_module then
  for _,name in ipairs {"cjson", "rsjson", "ljson", "dkjson", "lunajson", "json"} do
    if pcall(require, name) then json_module = name; break end
  end
end
local json = json_module and require(json_module)
local pretty_encode = json.encode

local export
if json and pcall(require, "ssl.https") then
  if json_module=="dkjson" then
    json = json.use_lpeg()
    function pretty_encode (data)
      return json.encode(data, {indent=true})
    end
  end
  local _env = setmetatable({json=json},{__index=_G})
  local _path = pathjoin(Shared.cfgpath, "restapi.moon.1")
  local restapi = assert(require"moonscript".loadfile(_path, nil, _env, nil))("restapi")
  local State = Shared.State
  local function getHistory (historyName)
    State[historyName] = State[historyName] or {}
    return State[historyName]
  end
  local function setHistory (historyName,t)
    State[historyName] = t
  end

  local function boolean (str, default)
    if type(str)=="number" then
      return str==1
    elseif type(str)=="boolean" then
      return str
    elseif str=="null" then
      return nil
    elseif str=="false" then
      return false
    else
      return str=="true" or default
    end
  end
  local function number (str)
    return str and tonumber(str) or str
  end
  local function obj (str)
    if type(str)=="string" then
      local fn = require("moonscript").loadstring(str)
      fn = fn or assert(loadstring("return "..str))
      str = setfenv(fn,{})()
    end
    return str
  end

  local function wrapCode (code, codetype)
    return ("```%s\n%s\n```"):format(codetype or "", code)
  end

  local function formatJson (data)
    return wrapCode(pretty_encode(data), "json")
  end

  local function formatJsonMsg (data,getMsgText)
    local msg = getMsgText(data)
    if type(msg)=="string" then
      if select(2, msg:gsub("\n","\n"))>2 then
        msg = wrapCode(msg, "error")
      end
      msg = msg.."\n"
    else
      msg = ""
    end
    return msg..formatJson(data)
  end

  local function formatErrMsg (meta,sep,getMsgText)
    local data = meta.data
    if not data then
      return meta.status_code or meta.statusline
    elseif type(data)=="table" then
      data = formatJsonMsg(data,getMsgText)
    elseif meta.statusline:find(data,1,"plain") then
      return meta.statusline
    end
    return table.concat({meta.statusline, data}, sep)
  end

  export = {
    restapi=restapi,
    getHistory=getHistory,
    setHistory=setHistory,
    boolean=boolean,
    number=number,
    obj=obj,
    formatJson=formatJson,
    formatJsonMsg=formatJsonMsg,
    formatErrMsg=formatErrMsg,
    check=check,
    json=json,
    cfgpath=Shared.cfgpath, -- for presets-openai.lua.cfg
    open=open,
  }
end

local function _import (filename, env, ...)
  local pathname = pathjoin(Shared.cfgpath, filename)
  local fn = assert(loadfile(pathname))
  env = env or getfenv(2) -- parent _ENV
  local name = env.name
  local ret1,ret2 = setfenv(fn,env)(export or Shared, ...)
  if name and name~=env.name then
    env.name = ("%s [%s]"):format(name, env.name)
  end
  return ret1,ret2
end

local function _readLines (args, filter, field)
  return function (data) -- getModels
    local args = args --luacheck: ignore 432/args
    if type(args)=="function" then
      local success
      success, args = pcall(args,data)
      if not success then return nil, args end
    end
    local pipe,err = io.popen(args)
    if not pipe then return nil, err end
    local list = {}
    for line in pipe:lines() do
      table.insert(list, not filter and line or filter(line))
    end
    pipe:close()
    return list, field
  end
end

local function assert (success, ...) -- to prevent "error object is not a string"
  if success then return success, ... end
  error(...==nil and "assertion failed!" or tostring(...), 2)
end

local mt = setmetatable({
  assert=assert,
  _import=_import,
  _isWindows=_isWindows,
  _optional=_optional,
  _pathjoin=pathjoin,
  _pipeOut=_pipeOut,
  _quote=_quote,
  _readLines=_readLines,
  _tmpfile=_tmpfile,
}, { __index=_G })
local function loadCfg (pathname, filename)
  local env = setmetatable({}, { __index=mt })
  local fn = assert(loadfile(pathname))
  local applyParamsFn, getModels = setfenv(fn, env)(export or Shared)
  for _,param in ipairs{"config", "sessionFile"} do
    if env[param] then
      env[param] = expandEnv(env[param])
    end
  end
  if env.historyName then
    env.showSession = env.showSession or function () --todo
      local session = Shared.State[env.historyName]
      if session and next(session) then
        require"le"(session)
      end
    end
  end
  if not env.exe then
    env.url = "https://github.com/FarManagerLegacy/LuaBinaries"
  end
  if env.hidden then
    for _,v in ipairs(env.hidden) do env.hidden[v] = true end
  end
  return {
    applyParamsFn = applyParamsFn,
    getModels = getModels,
    info = env,
    filename = filename,
    pathname = pathname,
    reachable = isReachable(env.exe, pathname)
  }
end

local function clearSession (info, session)
  if info.clearSession then
    if type(info.clearSession)=="function" then
      info.clearSession(session)
    else
      local cmd = info.clearSession:format(session)
      win.system(cmd)
    end
  elseif info.sessionFile then
    local pathname = info.sessionFile:format(session)
    win.DeleteFile(pathname)
  elseif info.historyName then
    export.setHistory(info.historyName, nil)
  end
end

local function HelpTopic (name)
  return ("<%s%s>%s"):format(Shared.cfgpath, path_sep, name)
end

local HK = {
  finish=function(self)
    self.finished = true
  end,
  iter=function(self,skip)
    if skip or self.finished then return self.spc end
    self.i = self.i+1
    if self.i==36 then self.finished = true end
    local _hk = self.i==10 and "0" or self.i<10 and self.i or string.char(self.i + string.byte"a" - 11)
    _hk = "&".._hk
    return _hk..self.fmt
  end,
}
local _hkmt = { __index=HK }
function HK.new (fmt)
  return setmetatable({ i=0, fmt=fmt, spc=string.rep(" ",fmt:len()+1) }, _hkmt)
end

local readHistory, cleanHistory
if far.CreateSettings then
  function readHistory (name)
    --https://forum.farmanager.com/viewtopic.php?t=13407
    local hSettings = assert(far.CreateSettings("far"), "Error accessing setings")
    local subkey = hSettings:OpenSubkey(0,name)
    local historyArr = assert(hSettings:Enum(subkey), "Error enumerating settings")
    hSettings:Free()
    local history = {}
    for _,item in ipairs(historyArr) do
      history[#history+1] = item.Name
    end
    return history
  end
  function cleanHistory (profile)
    if pcall(require, "lsqlite3") then
      local sqlite3  = require "lsqlite3"
      local db,_,errmsg = sqlite3.open(pathjoin(win.GetEnv"FARLOCALPROFILE", "history.db"), sqlite3.OPEN_READWRITE)
      if not db then return nil,errmsg end
      db:exec(("DELETE FROM history WHERE kind = 3 AND key LIKE 'AskAI:%s %%';"):format(profile))
      db:close()
    end
  end
else -- far2m
  local function splitLines (s,lines)
    local pos = 1
    local length = #s
    while pos<=length do
      local nlStart,nlEnd = string.find(s, '\n', pos)
      local line = string.sub(s, pos, (nlStart or 0)-1)
      lines[#lines+1] = line
      if not nlStart then break end
      pos = nlEnd+1
    end
  end
  local unescape = {
    --https://github.com/shmuz/far2m/blob/b770d1fd61cfe703d3c68b2b8da94feefced0ad5/utils/src/KeyFileHelper.cpp#L169
    ["\\r"]="\r",
    ["\\n"]="\n",
    ["\\t"]="\t",
    ["\\0"]="\0",
    ["\\\\"]="\\",
  }
  local historypath = far.InMyConfig("history/dialogs.hst") --luacheck: globals far.InMyConfig
  function readHistory (name)
    local file = assert(io.open(historypath, "r"))
    if file then
      local history = {}
      local section = "[SavedDialogHistory/"..name.."]"
      for line in file:lines() do
        if line==section then
          local nextLine = file:read()
          if nextLine then
            local Lines = nextLine:match"Lines=(.+)"
            if Lines then
              local quoted = Lines:match'"(.+)"'
              splitLines(quoted and quoted:gsub("\\.", unescape) or Lines, history)
            end
          end
          break
        end
      end
      file:close()
      return history
    end
  end
  function cleanHistory (profile)
    local file,errmsg = io.open(historypath, "r")
    if not file then return nil,errmsg end
    local tmppath = far.InMyConfig("history/dialogs.hst.tmp") --luacheck: globals far.InMyConfig
    local tmpfile,errmsg2 = io.open(tmppath, "w")
    if not tmpfile then
      file:close()
      return nil,errmsg2
    end
    local section = "[SavedDialogHistory/AskAI:"..profile.." "
    local len = #section
    local skip
    for line in file:lines() do
      if string.sub(line,1,len)==section then
        skip = true
      elseif skip then
        skip = #line~=0
      else
        tmpfile:write(line.."\n")
      end
    end
    file:close(); tmpfile:close()
    win.MoveFile(tmppath,historypath,"r")
  end
end

--make use of actl.Synchro after Luafar 859
local synchro = pcall(actl.Synchro, function()end) and actl.Synchro or function(fn, ...)
  far.Timer(1, function(t, ...)
    t:Close()
    fn(...)
  end, ...)
end

return {
  mload=mload,
  msave=msave,
  pathjoin=pathjoin,
  loadCfg=loadCfg,
  clearSession=clearSession,
  HelpTopic=HelpTopic,
  HK=HK,
  synchro=synchro,
  open=open,
  readHistory=readHistory,
  cleanHistory=cleanHistory,
  check=check,
}
