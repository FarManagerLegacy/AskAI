local Shared = ... -- State, _tmp, name, cfgpath, O

local function mload (profile, key)
  local s, err = mf.mload("jd", Shared.name)
  if err then return nil, err end
  assert(type(s)=="table", "Error in settings")
  if not profile then return s end
  s = s[profile]
  if s and key then
    assert(type(s)=="table", "Error in profile")
    return s[key]
  end
  return s
end

local function msave (profile, key, value)
  local s
  if type(profile)~="string" then
    assert(type(profile)=="table")
    s = profile
  else
    s = mf.mload("jd", Shared.name) or {}
    if type(key)~="string" then
      assert(key==nil or type(key)=="table")
      s[profile] = key
    else
      local p = s[assert(profile)]
      if not p then
        p = {}
        s[profile] = p
      end
      p[key] = value
    end
  end
  assert(mf.msave("jd", Shared.name, s), "Error writing settings")
end

local path_sep = package.config:sub(1,1)
local function pathjoin (...) --same as win.JoinPath since Luafar 857
  local args = {...}
  assert(#args==select("#",...), "arg cannot be nil")
  return table.concat(args, path_sep)
end

local function check (key)
  repeat
    local k = win.ExtractKeyEx()
    if k and far.InputRecordToName(k)==key then return true end
  until not k
end

local loaded = {}
local function load (filename)
  if not Shared.O.debug and loaded[filename] then
    return loaded[filename]
  end
  local pathname = pathjoin(Shared.cfgpath, filename)
  local fn = assert(loadfile(pathname))
  loaded[filename] = fn
  return fn
end

local function HelpTopic (name)
  return ("<%s%s>%s"):format(Shared.cfgpath, path_sep, name)
end

local HK = {
  finish=function(self)
    self.finished = true
  end,
  iter=function(self,skip)
    if skip or self.finished then return self.spc end
    self.i = self.i+1
    if self.i==36 then self.finished = true end
    local _hk = self.i==10 and "0" or self.i<10 and self.i or string.char(self.i + string.byte"a" - 11)
    _hk = "&".._hk
    return _hk..self.fmt
  end,
}
local _hkmt = { __index=HK }
function HK.new (fmt)
  return setmetatable({ i=0, fmt=fmt, spc=string.rep(" ",fmt:len()+1) }, _hkmt)
end

local readHistory, cleanHistory
if far.CreateSettings then
  function readHistory (name)
    --https://forum.farmanager.com/viewtopic.php?t=13407
    local hSettings = assert(far.CreateSettings("far"), "Error accessing setings")
    local subkey = hSettings:OpenSubkey(0,name)
    local historyArr = assert(hSettings:Enum(subkey), "Error enumerating settings")
    hSettings:Free()
    local history = {}
    for _,item in ipairs(historyArr) do
      history[#history+1] = item.Name
    end
    return history
  end
  function cleanHistory (profile)
    if pcall(require, "lsqlite3") then
      local sqlite3  = require "lsqlite3"
      local db,_,errmsg = sqlite3.open(pathjoin(win.GetEnv"FARLOCALPROFILE", "history.db"), sqlite3.OPEN_READWRITE)
      if not db then return nil,errmsg end
      db:exec(("DELETE FROM history WHERE kind = 3 AND key LIKE 'AskAI:%s %%';"):format(profile))
      db:close()
    end
  end
else -- far2m
  local function splitLines (s,lines)
    local pos = 1
    local length = #s
    while pos<=length do
      local nlStart,nlEnd = string.find(s, '\n', pos)
      local line = string.sub(s, pos, (nlStart or 0)-1)
      lines[#lines+1] = line
      if not nlStart then break end
      pos = nlEnd+1
    end
  end
  local unescape = {
    --https://github.com/shmuz/far2m/blob/b770d1fd61cfe703d3c68b2b8da94feefced0ad5/utils/src/KeyFileHelper.cpp#L169
    ["\\r"]="\r",
    ["\\n"]="\n",
    ["\\t"]="\t",
    ["\\0"]="\0",
    ["\\\\"]="\\",
  }
  local historypath = far.InMyConfig("history/dialogs.hst") --luacheck: globals far.InMyConfig
  function readHistory (name)
    local file = assert(io.open(historypath, "r"))
    if file then
      local history = {}
      local section = "[SavedDialogHistory/"..name.."]"
      for line in file:lines() do
        if line==section then
          local nextLine = file:read()
          if nextLine then
            local Lines = nextLine:match"Lines=(.+)"
            if Lines then
              local quoted = Lines:match'"(.+)"'
              splitLines(quoted and quoted:gsub("\\.", unescape) or Lines, history)
            end
          end
          break
        end
      end
      file:close()
      return history
    end
  end
  function cleanHistory (profile)
    local file,errmsg = io.open(historypath, "r")
    if not file then return nil,errmsg end
    local tmppath = far.InMyConfig("history/dialogs.hst.tmp") --luacheck: globals far.InMyConfig
    local tmpfile,errmsg2 = io.open(tmppath, "w")
    if not tmpfile then
      file:close()
      return nil,errmsg2
    end
    local section = "[SavedDialogHistory/AskAI:"..profile.." "
    local len = #section
    local skip
    for line in file:lines() do
      if string.sub(line,1,len)==section then
        skip = true
      elseif skip then
        skip = #line~=0
      else
        tmpfile:write(line.."\n")
      end
    end
    file:close(); tmpfile:close()
    win.MoveFile(tmppath,historypath,"r")
  end
end

--make use of actl.Synchro after Luafar 859
local synchro = pcall(actl.Synchro, function()end) and actl.Synchro or function(fn, ...)
  far.Timer(1, function(t, ...)
    t:Close()
    fn(...)
  end, ...)
end

return {
  mload=mload,
  msave=msave,
  pathjoin=pathjoin,
  load=load,
  HelpTopic=HelpTopic,
  HK=HK,
  synchro=synchro,
  readHistory=readHistory,
  cleanHistory=cleanHistory,
  check=check,
}
