name = "Nexra"
url = "https://aryahcr.cc/chat/en"

local U = ...
if not U.restapi then return end
exe = true

historyName = name

predefined = {
  model={
    "gpt-4o",
    "chatgpt",
    "gemini-pro",
    "llama-3.1",
    "Bing",
    "blackbox",
    "qwen",
  },
  role={"", "You are a friendly AI assistant"},
  conversation_style={
    "", "Balanced", "Creative", "Precise",
  },
  --markdown="true",
  websearch={"","true"},
}

local function getMsgText (data)
  return data.message or data.detail or data.error
end

--https://nexra.aryahcr.cc/documentation/en
return function (session, stream, context, user, secret, model, role, websearch, conversation_style)
  local boolean = U.boolean
  local client = U.restapi.LinesStream(nil, "https://nexra.aryahcr.cc/api", {
    ["x-nexra-user"]=user,    -- user-xxxxxxxx
    ["x-nexra-secret"]=secret,-- nx-xxxxxxx-xxxxx-xxxxx
  })
  client.defaultEndpoint = "/chat/complements"
  client.separatorPattern = "^(.-)\30(.-)$" -- 1E - RS
  client.consumeBufferRest = true

  local messages = session and U.getHistory(historyName) or {}
  local data = {
    stream=boolean(stream),
    messages=messages,
    model=model,
    --markdown=boolean(markdown),
    websearch=boolean(websearch), --blackbox, qwen
    conversation_style=conversation_style, --Bing
  }
  if role then
    if messages[1] and messages[1].role=="system" then
      messages[1].content = role
    else
      table.insert(messages, 1, {role="system", content=role})
    end
  end
  table.insert(messages, {role="user", content=context})

  return function (cb)
    local streamed
    local lastResponse = ""
    local function ln() return streamed and "\n\n" or "" end
    local response,meta = client:generate(data, function (chunk,err,extra)
      if err then
        cb(ln()); streamed = true
        if type(extra)=="string" then
          err = err.." "..extra
        elseif type(extra)=="table" then
          return cb(U.formatErrMsg({ statusline=err, data=extra }, "\n", getMsgText).."\n")
        end
        return cb("Error: "..err)
      elseif chunk.error then
        error("Error:\n"..U.formatJson(chunk))
      elseif chunk.finish then
        --cb("\nSTOP")
      elseif chunk.message and chunk.message~=U.json.null then
        local message = chunk.original~=U.json.null and chunk.original or chunk.message
        cb(string.sub(message, #lastResponse+1))
        lastResponse = message
        streamed = true
      else
        error("Unexpected response:\n"..U.formatJson(chunk))
      end
      if U.check"Esc" then error("interrupted", 0) end
    end)

    if response==U.restapi.STREAMED then
      table.insert(messages, {role="assistant", content=lastResponse})
    elseif response then
      table.insert(messages, {role="assistant", content=response.message})
      cb(response.message)
    else
      table.remove(messages)
      if not streamed then
        cb(ln()..U.formatErrMsg(meta,"\n\n",getMsgText))
      end
    end
    cb()
  end
end
