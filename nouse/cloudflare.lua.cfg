name = "Cloudflare"
local applyParams,getModels = _import "openai.lua.cfg"
if not exe then return end

predefined = {
  --https://developers.cloudflare.com/api/operations/workers-ai-search-model
  --https://api.cloudflare.com/client/v4/accounts/49214182ccbcfc0393d2e1f31ac17df4/ai/models/search?task=text+generation
  model={
    "@cf/deepseek-ai/deepseek-math-7b-instruct",
    "@cf/defog/sqlcoder-7b-2",
    "@cf/fblgit/una-cybertron-7b-v2-bf16",
    "@cf/google/gemma-2b-it-lora",
    "@cf/google/gemma-7b-it-lora",
    "@cf/meta-llama/llama-2-7b-chat-hf-lora",
    "@cf/meta/llama-2-7b-chat-fp16",
    "@cf/meta/llama-2-7b-chat-int8",
    "@cf/meta/llama-3-8b-instruct-awq",
    "@cf/meta/llama-3-8b-instruct",
    "@cf/meta/llama-3.1-8b-instruct-awq",
    "@cf/meta/llama-3.1-8b-instruct-fp8",
    "@cf/meta/llama-3.1-8b-instruct",
    "@cf/microsoft/phi-2",
    "@cf/mistral/mistral-7b-instruct-v0.1",
    "@cf/mistral/mistral-7b-instruct-v0.2-lora",
    "@cf/openchat/openchat-3.5-0106",
    "@cf/qwen/qwen1.5-0.5b-chat",
    "@cf/qwen/qwen1.5-1.8b-chat",
    "@cf/qwen/qwen1.5-14b-chat-awq",
    "@cf/qwen/qwen1.5-7b-chat-awq",
    "@cf/thebloke/discolm-german-7b-v1-awq",
    "@cf/tiiuae/falcon-7b-instruct",
    "@cf/tinyllama/tinyllama-1.1b-chat-v1.0",
    "@hf/google/gemma-7b-it",
    "@hf/meta-llama/meta-llama-3-8b-instruct",
    "@hf/mistral/mistral-7b-instruct-v0.2",
    "@hf/nexusflow/starling-lm-7b-beta",
    "@hf/nousresearch/hermes-2-pro-mistral-7b",
    "@hf/thebloke/deepseek-coder-6.7b-base-awq",
    "@hf/thebloke/deepseek-coder-6.7b-instruct-awq",
    "@hf/thebloke/llama-2-13b-chat-awq",
    "@hf/thebloke/llamaguard-7b-awq",
    "@hf/thebloke/mistral-7b-instruct-v0.1-awq",
    "@hf/thebloke/neural-chat-7b-v3-1-awq",
    "@hf/thebloke/openhermes-2.5-mistral-7b-awq",
    "@hf/thebloke/zephyr-7b-beta-awq",
  }
}

--https://developers.cloudflare.com/workers-ai/get-started/rest-api/#1-get-api-token-and-account-id
--https://developers.cloudflare.com/workers-ai/configuration/open-ai-compatibility/
--https://developers.cloudflare.com/workers-ai/models/
return function (session, stream, context, Account_ID, AI_API_Token, model, temperature, role)
  return applyParams {
    session, stream, context,
    apibase=("https://api.cloudflare.com/client/v4/accounts/%s/ai/v1"):format(assert(Account_ID, "Account ID required")),
    apikey=assert(AI_API_Token, "Workers AI API Token required"),
    model=assert(model, "model required"),
    temperature=temperature,
    role=role,
  }
end,


function (data) -- getModels
  if not data.Account_ID or not data.AI_API_Token then return end
  data.apibase = ("https://api.cloudflare.com/client/v4/accounts/%s/ai"):format(data.Account_ID)
  data.apikey = data.AI_API_Token
  return getModels(data, "/models/search?task=text+generation")
end
