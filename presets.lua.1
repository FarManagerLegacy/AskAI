local Shared = ... -- name, processSetsHistories, populateHistory
local State = Shared.State
local utils = Shared.utils
local cfgpath = Shared.cfgpath
local II = Shared.II
local cfg = Shared.cfg
local F = far.Flags

-- menu ------------
F.FMENU_SHOWSHORTBOX = F.FMENU_SHOWSHORTBOX or 0 -- not recent far2m
F.FMENU_SHOWSINGLEBOX = F.FMENU_SHOWSINGLEBOX or 0

local function toggleHidden (items)
  for _,item in ipairs(items) do
    if item.hidden~=nil then
      item.hidden = not item.hidden
    end
  end
end

local function loadPreset (pathname, itemsNames, cfgInfo)
  local fn = assert(loadfile(assert(pathname)))
  local env = setmetatable({},{__index=_G})
  local ret = setfenv(fn,env)(Shared)
  for k in pairs(env) do
    if not itemsNames[k] then
      if k~="modelsMeta" then
        local key = cfgInfo.env and cfgInfo.env[k]
        if not key then return end
        env[key] = env[k]
      end
      env[k] = nil
    end
  end
  return env, ret and ret~=cfgInfo.name:sub(1, ret:len()) and ret
end
local presetsTopic = utils.HelpTopic "Presets"
local function choosePreset (itemsNames, cfgInfo)
  local items = {}
  local hk = utils.HK.new(".")
  local function prepItem (item, pathname)
    local success, data, limit = pcall(loadPreset, pathname, itemsNames, cfgInfo)
    local err; if not success then err,data = data,nil end
    local hidden = (item.fileHidden or not data) and success or nil
    local empty = data and not next(data) and "empty"
    local extra = err or limit or empty
    local text = extra and ("%s [%s]"):format(item.name, extra) or item.name
    item.hk = item.hk or hk:iter(hidden)
    item.text = item.hk.." "..text
    item.grayed = not data or empty
    item.data = not empty and data
    item.err = err
    item.empty = empty
    return hidden -- to hide
  end
  far.RecursiveSearch(cfgpath, "*.preset>>D", function (file, pathname)
    table.insert(items,{
      name=file.FileName:sub(1,-(".preset"):len()-1),
      selected=State.lastPreset==pathname,
      pathname=pathname,
      fileHidden=file.FileAttributes:find"h",
    })
  end)
  table.sort(items, function(a,b) return a.name:lower() < b.name:lower() end)
  for _,item in ipairs(items) do
    item.hidden = prepItem(item, item.pathname)
  end
  hk:finish()
  local props = {
    Title="Load preset",
    Bottom="Ctrl+H, F1, ...",
    HelpTopic=presetsTopic,
    Id=win.Uuid "6B5DB1AE-B377-4A37-8F73-7DCEBE8C332C",
    Flags=F.FMENU_SHOWSHORTBOX +F.FMENU_SHOWSINGLEBOX,
  }
  local bkeys = "ShiftF4 Ins F4 F5 ShiftF5 F6 ShiftF6 F8 Del CtrlH"
  repeat
    local item, pos = far.Menu(props, items, bkeys)
    if not item then break end -- Esc (or Enter in empty list)
    local bk = item.BreakKey
    if bk then
      item = items[pos]
    else -- Enter
      State.lastPreset = item.pathname
      return item.data
    end

    if bk=="CtrlH" then
      toggleHidden(items)
    elseif bk=="ShiftF4" or bk=="Ins" then
      local name = far.InputBox(win.Uuid "B45A2CFB-6C4F-49E9-A1EE-4721BB4AAFA4",
                                Shared.name..": create preset", "Enter new name",
                                "AskAI preset", nil, nil, presetsTopic, F.FIB_NOUSELASTHISTORY)
      if name then
        name = name:gsub("[/\\]","-")
        local pathname = utils.pathjoin(cfgpath, name..".preset")
        if F.EEC_MODIFIED==editor.Editor(pathname) then
          pos = pos~=0 and bk=="Ins" and pos or 1
          local newitem = { name=name, pathname=pathname, }
          prepItem(newitem, pathname)
          table.insert(items, pos, newitem)
        end
      end
    elseif not item then -- luacheck: ignore 542
      -- noop
    elseif bk=="F4" then
      if F.EEC_MODIFIED==editor.Editor(item.pathname) then
        prepItem(item, item.pathname)
      end
    elseif bk=="F5" or bk=="ShiftF5" then
      local name = far.InputBox(win.Uuid "F2366621-CF3A-4953-B297-D85EA0BD0287",
                                Shared.name..": copy preset", "Enter new name",
                                "AskAI preset", nil, nil, presetsTopic, F.FIB_NOUSELASTHISTORY)
      if name then
        name = name:gsub("[/\\]","-")
        local pathname = utils.pathjoin(cfgpath, name..".preset")
        local res,err = win.CopyFile(item.pathname, pathname, true)
        if res then
          pos = pos+1
          local newitem = { name=name, pathname=pathname, }
          prepItem(newitem, pathname)
          table.insert(items, pos, newitem)
        else
          err = err:match"^(.-)\r\n$" or err
          local msg = ('Cannot copy\n"%s"\nto\n"%s"\n\1\n%s'):format(item.name..".preset", pathname, err)
          far.Message(msg,Shared.name.." copy preset error",
                      ";Ok", "w", presetsTopic,
                      win.Uuid "610D35D5-6CBF-4AC4-81D0-99BF791CA3B4")
        end
      end
    elseif bk=="F6" or bk=="ShiftF6" then
      local name = far.InputBox(win.Uuid "9374B901-94EC-4FD4-9B01-A73010A344D5",
                                Shared.name..": rename preset", "Enter new name",
                                "AskAI preset", item.name, nil, presetsTopic, F.FIB_NOUSELASTHISTORY)
      if name then
        name = name:gsub("[/\\]","-")
        local pathname = utils.pathjoin(cfgpath, name..".preset")
        local res,err = win.MoveFile(item.pathname, pathname)
        if res then
          item.name, item.pathname = name, pathname
          prepItem(item, pathname)
        else
          err = err:match"^(.-)\r\n$" or err
          local msg = ('Cannot rename\n"%s"\nto\n"%s"\n\1\n%s'):format(item.name..".preset", pathname, err)
          far.Message(msg,Shared.name.." rename preset error",
                      ";Ok", "w", presetsTopic,
                      win.Uuid "2559CAD9-82AD-4297-99B9-D3BA144AA3AE")
        end
      end
    elseif bk=="F8" or bk=="Del" then
      local ret = far.Message("Do you want to delete the preset?\n"..item.name, Shared.name,
                              "Delete;Cancel", "w", presetsTopic,
                              win.Uuid "E4486D00-4751-4AAA-97D4-D30A9D618BEF")
      if ret==1 and win.DeleteFile(item.pathname) then
        table.remove(items, pos)
        if pos>#items then pos = pos-1 end
      end
    end
    props.SelectIndex = pos
  until false
end

-- main -----------------------
local function _pcall (fn, ...)
  local success, res = pcall(fn, ...)
  if success then return res end
  far.Message(res,"Error in preset",nil,"wl")
end
II:add {F.DI_BUTTON, "&Presets - F5", nil, F.DIF_BTNNOCLOSE +F.DIF_CENTERGROUP,
  onclick=function(_,hDlg)
    local preset = choosePreset(II, cfg.info)
    if preset then
      hDlg:EnableRedraw(0)
      local secondary = {}
      for k,v in pairs(preset) do
        local item = II[k]
        local dependants = cfg.info.sets and cfg.info.sets[k]
        if dependants then
          if type(v)=="function" then
            v = _pcall(v)
            if not v then goto exitPresets end
          end
          if v~=hDlg:GetText(item.idx) then
            hDlg:SetText(item.idx, v)
            hDlg:AddHistory(item.idx, v)
            Shared.processSetsHistories(hDlg, v, dependants)
          end
        else
          secondary[item] = v
        end
      end
      for item,v in pairs(secondary) do
        local exV = hDlg:GetText(item.idx)
        local isFn = type(v)=="function"
        if isFn then
          v = _pcall(v, exV)
          if not v then goto continue end
        end
        if type(v)=="table" then
          Shared.populateHistory(item, hDlg, v)
          v = v[1]
          isFn = false
        end
        local isHidden = cfg.info.hidden and cfg.info.hidden[item.name]
        if isHidden or isFn or exV=="" or exV:match" env variable!$" then
          hDlg:SetText(item.idx, v)
          hDlg:AddHistory(item.idx, v)
        end
        ::continue::
      end
      ::exitPresets::
      hDlg:EnableRedraw(1)
    end
  end,
  name="btnPreset"
}
