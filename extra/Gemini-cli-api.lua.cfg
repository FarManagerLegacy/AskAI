name = "Gemini CLI API"
local applyParams = _import "Gemini.lua.cfg"
if not exe then return end
local U = ...

url = "https://github.com/google-gemini/gemini-cli#option-1-login-with-google-oauth-login-using-your-google-account"
predefined.api_base = "https://cloudcode-pa.googleapis.com/v1internal"
predefined.apikey = ""
predefined.model = {
  "gemini-2.5-flash",
  "gemini-2.5-flash-preview-05-20",

  "gemini-2.5-flash-lite",
  "gemini-2.5-flash-lite-preview-06-17",

  "gemini-2.5-pro",
}

U.restapi.GoogleGeminiCLI = U.restapi.GoogleGeminiCLI or assert(require "moonscript".loadstring([[
class GoogleAuth extends api.Plain
  api_base:"https://oauth2.googleapis.com"
  OAUTH_CLIENT_ID:"681255809395-oo8ft2oprdrnp9e3aqf6av3hmdib135j.apps.googleusercontent.com"
  OAUTH_CLIENT_SECRET:"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"
  new: =>
    @payload = table.concat {
      "grant_type=refresh_token", "refresh_token=%s", "client_id=#{@OAUTH_CLIENT_ID}", "client_secret=#{@OAUTH_CLIENT_SECRET}"
    }, "&"

  process: (refresh_token) =>
    assert @request "POST", "/token",
      @payload\format refresh_token,
      nil, "Content-Type": "application/x-www-form-urlencoded"

googleAuth = GoogleAuth!
class GoogleGeminiCLI extends api.BasicSSE
  new: (@refresh_token, @api_base) =>
    assert @refresh_token, "refresh_token required"
    assert @api_base, "api_base required"
    with @_refreshToken!
      .project or= (assert @request "POST", ":loadCodeAssist", cloudaicompanionProject:"default-project",
        nil, Authorization: "Bearer #{.access_token}").cloudaicompanionProject

  _refreshToken: =>
    GoogleGeminiCLI._cache or= {}
    cache = GoogleGeminiCLI._cache
    token = cache[@refresh_token] or {}
    curtime = os.time!
    unless token.exp and token.exp>curtime
      with googleAuth\process @refresh_token
        token = access_token:.access_token, exp:curtime + .expires_in, project:@project
      cache[@refresh_token] = token
    token

  generate: (request, model, stream, delta_callback=nil) =>
    endpoint = stream and ":streamGenerateContent?alt=sse" or ":generateContent"
    with @_refreshToken!
      return super endpoint, {:model, project:.project, :request}, if stream then delta_callback,
        "Authorization":"Bearer #{.access_token}"

  is_valid: (parsed) =>
    parsed.response.candidates
]], "GoogleGeminiCLI moon src",nil,setmetatable({api=U.restapi},{__index=_G}),nil))()
GoogleGeminiCLI = U.restapi.GoogleGeminiCLI

for i=1,10 do
  if debug.getupvalue(applyParams, i)=="api" then
    debug.setupvalue(applyParams, i, GoogleGeminiCLI)
    break
  end
end

return applyParams
