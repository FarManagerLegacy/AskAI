name = "presets"
local applyParams, getModels = _import "openai.lua.cfg"
if not exe then return end

local Shared = ...
local cfgpath = Shared.cfgpath
local list = {}
far.RecursiveSearch(cfgpath, "*.preset>>D", function (item)
  table.insert(list, item.FileName)
end)

predefined = {
  preset=list
}

sets = {
  preset = {"apikey", "model", "headers"}
}

local function _pcall (fn, ...)
  local success, res = pcall(fn, ...)
  if success then return res end
  far.Message(res,"Error in preset",nil,"wl")
end

local Cache = Shared.getHistory(name)
local function getCache (preset)
  Cache[preset] = Cache[preset] or {}
  return Cache[preset]
end
local function loadPreset (name, data)
  local args = setmetatable({}, {__index=_G})
  _import(assert(name, "preset required"), args)
  for k,v in pairs(args) do
    if data[k] then
      --nop
    elseif type(v)=="function" then
      local cache = getCache(name)
      data[k] = cache[k] or _pcall(v)
      cache[k] = data[k]
      if not data[k] and k=="apibase" then
        return -- break
      end
    elseif type(v)=="table" then
      data[k] = v[1]
    else
      data[k] = v
    end
  end
  return data
end

local function getLocals ()
  local args,level = {},2
  for i=1,debug.getinfo(level, "u").nparams do
    local name,value = debug.getlocal(level, i)
    args[name] = value
  end
  return args
end
return function (session, stream, context, preset, apikey, model, temperature, role, headers) --luacheck: ignore 212
  local args = loadPreset(preset,getLocals())
  return args and applyParams(args)
end,

-- getModels
function (data)
  if _pcall(loadPreset, data.preset, data) then
    return getModels(data)
  end
end
