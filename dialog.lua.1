local Shared = ... -- name, utils, askAI, _tmp, cfgpath
local State = Shared.State
local utils = Shared.utils -- HelpTopic, clearSession, HK
local menu = Shared.menu
local O = Shared.O

local F = far.Flags
local DIF_HOMEITEM = F.DIF_HOMEITEM or 0 --far2m
local isFar3 = F.ACTL_GETFARMANAGERVERSION

local newDlgInfo = assert(loadfile(utils.pathjoin(Shared.cfgpath, "DlgHelper.lua.1")))()
local X2 = 3 -- coords indices
local SELECTED, HISTORY, FLAGS, DATA = 6,7,9,10

local function populateHistory (item, hDlg, values, source)
  if not item then return end
  if type(values)~="table" then values = {values} end
  local success, history = pcall(utils.readHistory, item.History)
  if not success then
    far.Message(history, "Error", nil, "wl")
    return
  end
  local inHistory = {}
  for _,v in ipairs(history) do inHistory[v] = true end
  local added
  for i=#values,1,-1 do
    if not inHistory[values[i]] then
      hDlg:AddHistory(item.idx, values[i])
      added = true
    end
  end
  if added and history[1] then -- preserve lasthistory
    hDlg:AddHistory(item.idx, history[#history])
  end
  if source=="init" and #history==0 then
    hDlg:SetText(item.idx, values[1] or "")
  end
end

local function getEnvValues (list)
  local t = {}
  for var in pairs(list) do
    local v = win.GetEnv(var)
    if v then table.insert(t,v) end
  end
  return t
end

local function isOpened (pathname)
  for i=1,actl.GetWindowCount() do
    if actl.GetWindowInfo(i).Name==pathname then
      return true
    end
  end
end

local idInput = win.Uuid"58DD9ECD-CFFA-472E-BFD7-042295C86CAE"
local SESSION = "default"
local _prompt = "Ask any &question (editor selection will be included with request)"
local function main (profile, cfg, prompt, context)
  if State.isDlgOpened then return end
  cfg.params = {}
  for i=1,debug.getinfo(cfg.applyParamsFn, "u").nparams do
    local name = debug.getlocal(cfg.applyParamsFn, i)
    cfg.params[i] = name
    cfg.params[name] = i
  end
  local canSession = cfg.info.clearSession or cfg.info.sessionFile or cfg.info.historyName

  local width = 86
  local flags = O.smallDlg and F.FDLG_SMALLDIALOG or 0
  local maxW = Far.Width
  if width+(O.smallDlg and 0 or 3*2)>maxW then
    flags = F.FDLG_SMALLDIALOG
    width = math.min(maxW, width)
  end
  local data = {
    width=width,
    Guid=idInput,
    Flags=flags,
    HelpTopic=utils.HelpTopic"Dialog",
  }
  local II = newDlgInfo(data)
  local F_HISTORY = F.DIF_HISTORY +F.DIF_USELASTHISTORY +F.DIF_MANUALADDHISTORY
  II:add {F.DI_DOUBLEBOX, Shared.name, {[X2]=-1}}
  II:add {F.DI_TEXT, _prompt}
  II:ln() -- -- -- --
  II:add {F.DI_EDIT, prompt, {[X2]=-1},
    DIF_HOMEITEM +F.DIF_FOCUS
    +F_HISTORY, History=("AskAI%s prompt"):format(profile~="default" and ":"..profile or ""),
    name="prompt"
  }
  II:ln() -- -- -- --
  II:add {F.DI_TEXT, cfg.info.name, {}, F.DIF_SEPARATOR +F.DIF_CENTERGROUP,
    oncolor=function(_,_,_,Param2)
      local HiText = Param2[2]
      Param2[1] = HiText
      return Param2
    end
  }
  II:ln() -- -- -- --
  II:add {F.DI_CHECKBOX, "&Session", nil, canSession and F.DIF_3STATE or F.DIF_DISABLE,
    canSession and State.useSession or 0,
    onkey=function(_,_,_,key)
      if key=="F3" then
        if cfg.info.showSession then
          cfg.info.showSession()
        elseif cfg.info.sessionFile then
          local pathname = cfg.info.sessionFile:format(SESSION)
          if win.GetFileAttr(pathname) then
            viewer.Viewer(pathname)
          end
        end
        return true
      end
    end,
    name="chkUseSession"
  }
  local sessionExists = cfg.info.clearSession
  if cfg.info.sessionFile then
    sessionExists = win.GetFileAttr(cfg.info.sessionFile:format(SESSION))
  elseif cfg.info.historyName then
    sessionExists = State[cfg.info.historyName]
    sessionExists = sessionExists and next(sessionExists)
  end
  II:add {F.DI_BUTTON, "‹&-›", nil, F.DIF_BTNNOCLOSE +F.DIF_NOBRACKETS +(sessionExists and 0 or F.DIF_DISABLE),
    onclick=function(_,hDlg,idx)
      utils.clearSession(cfg.info, SESSION)
      local item = hDlg:GetDlgItem(idx)
      item[FLAGS] = bit64.bor(item[FLAGS], F.DIF_DISABLE)
      hDlg:SetDlgItem(idx, item)
    end, name="btnClrSession"
  }
  local x2 = 18
  II:add {F.DI_CHECKBOX, "st&ream", {x2}, cfg.params.stream and 0 or F.DIF_DISABLE, State.useStream,
    name="chkStream"
  }
  II:add {F.DI_CHECKBOX, "&Wrap", {-12}, F.DIF_3STATE, State.useWrap,
    onclick=function(_,hDlg,idx)
      hDlg:Enable(idx+1, hDlg:GetCheck(idx)==0 and 0 or 1)
    end, name="chkWrap"
  }
  II:add {F.DI_FIXEDIT, State.wrapAt, {[X2]=-1},
    (State.useWrap~=0 and 0 or F.DIF_DISABLE) +F.DIF_MASKEDIT, Mask="999",
    name="edtWrap"
  }
  II:ln() -- -- -- --

  local function makeHistoryName (param, name)
    name = name or cfg.info.histories and cfg.info.histories[param]
    local prefix = ("AskAI%s"):format(profile~="default" and ":"..profile or "")
    local history = prefix.." param "..(name or param)
    if not (name or O.sharedParams[param]) then
      local baseName = cfg.info.name:match"[^[]+":match"^(.-)%s*$"
      history = history.." - "..baseName
    end
    return history
  end
  local function processSetsHistories (hDlg, text, dependants)
    local env = cfg.info.env
    for _,subparam in ipairs(dependants) do
      local items = {II[subparam]}
      items[#items+1] = env and env[subparam] and II[env[subparam]]
      for _,item in ipairs(items) do
        local idx = item.idx
        hDlg:SetText(idx, "")
        local History = makeHistoryName(nil, subparam..":"..text)
        II[item.name].History = History
        hDlg:SetHistory(idx, History)
        hDlg:EditUnchangedFlag(idx, 1)
        item[DATA] = hDlg:GetText(idx)
      end
    end
  end

  local function processSetsDependants (self, hDlg, idx, text)
    text = text or hDlg:GetText(idx)
    local dependants = cfg.info.sets[self.name]
    hDlg:EnableRedraw(0)
    processSetsHistories(hDlg, text, dependants)
    hDlg:EnableRedraw(1)
  end
  local hk = utils.HK.new("")
  for _,param in ipairs(cfg.params) do
    if not ({context=1, prompt=1, session=1, stream=1})[param] then
      if hk.i==0 then
        II:add {F.DI_TEXT, "Parameters", {[X2]=-1}, F.DIF_SEPARATOR +F.DIF_CENTERTEXT}
        II:ln() -- -- -- --
      end
      local col2 = math.max(x2, param:len()+1)
      local visibility = cfg.info.hidden and cfg.info.hidden[param] and F.DIF_HIDDEN or F.DIF_NONE
      II:add {F.DI_TEXT, hk:iter(visibility==F.DIF_HIDDEN)..param, {"-1", [X2]=col2-1}, visibility}
      local dependants = cfg.info.sets and cfg.info.sets[param]
      II:add {F.DI_EDIT, nil, {col2, nil, -1}, F_HISTORY + visibility,
        History=makeHistoryName(param),
        oninit=dependants and processSetsDependants,
        onedit=dependants and processSetsDependants,
        name=param
      }
      if visibility~=F.DIF_HIDDEN then II:ln() end -- -- -- --
    end
  end
  if cfg.info.env then
    local function colorLabel (_,hDlg,idx,Param2)
      local Next = II[idx+1][DATA]
      if Next~="" and Next~=hDlg:GetText(idx+1) then
        local Title = Param2[1]
        if Title.Flags then
          Title.Flags = bit64.bor(Title.Flags, F.FCF_FG_ITALIC)
        else -- far2m
          Param2[1] = bit64.bor(Param2[1], F.COMMON_LVB_REVERSE_VIDEO)
        end
        return Param2
      end
    end
    local function resetEnvValue (self,hDlg,idx,key)
      if key=="Del" then
        if self[DATA]~="" and hDlg:GetText(idx)=="" then
          hDlg:EnableRedraw(0)
          hDlg:SetText(idx, self[DATA])
          hDlg:EditUnchangedFlag(idx, 1)
          hDlg:EnableRedraw(1)
          return true
        end
        return false
      end
    end
    II:add {F.DI_TEXT, "Environment &variables", {[X2]=-1}, F.DIF_SEPARATOR +F.DIF_CENTERTEXT}
    II:ln() -- -- -- --
    for k,var in pairs(cfg.info.env) do
      local value = win.GetEnv(var)
      local col2 = math.max(x2, var:len()+1)
      II:add {F.DI_TEXT, hk:iter()..var, {"-1", [X2]=col2-1},
        oncolor=colorLabel,
      }
      II:add {F.DI_EDIT, value or "", {col2, nil, -1}, F_HISTORY,
        History=makeHistoryName(k),
        onkey=resetEnvValue,
        name=var
      }
      II:ln() -- -- -- --
    end
  end
  II:add {F.DI_TEXT, nil, nil, F.DIF_SEPARATOR}
  II:ln() -- -- -- --
  if cfg.info.exe~=true then
    local vFlags = cfg.info.config and 0 or F.DIF_DISABLE
    II:add {F.DI_BUTTON, "&Utility cfg", nil, F.DIF_BTNNOCLOSE +F.DIF_CENTERGROUP +vFlags,
      onclick=function()
        if cfg.info.config then
          editor.Editor(cfg.info.config)
        end
      end,
    }
  end
  II:add {F.DI_BUTTON, "Def&inition", nil, F.DIF_BTNNOCLOSE +F.DIF_CENTERGROUP,
    onclick=function(_,hDlg,idx)
      if F.EEC_MODIFIED==editor.Editor(cfg.pathname) then
        hDlg:Close(idx)
        utils.synchro(Shared.askAI, prompt, profile, cfg.pathname)
      end
    end,
  }
  assert(loadfile(utils.pathjoin(Shared.cfgpath, "presets.lua.1"))) {
    II=II, utils=utils, cfg=cfg, name=Shared.name, State=State, cfgpath=Shared.cfgpath,
    processSetsHistories=processSetsHistories, populateHistory=populateHistory,
  }
  II:add {F.DI_BUTTON, "&Models - F6", nil, F.DIF_BTNNOCLOSE +F.DIF_CENTERGROUP +(cfg.getModels and 0 or F.DIF_DISABLE),
    onclick=function(_,hDlg)
      local args = {}
      for i=1,#cfg.params do
        local param = cfg.params[i]
        local ii = II[param] and II[param].idx
        if ii then
          local value = hDlg:GetText(ii)
          args[param] = value~="" and value or nil
        end
      end
      local getModels, fromHistory = cfg.getModels
      local SHIFT = 16 -- invert action (also for F6/ShiftF6)
      local invert = isFar3 and win.GetKeyState(SHIFT)
      if not cfg.getModels or (args.modelsMeta=="none" ~= invert) then
        if not II.model then return end
        if isFar3 then
          utils.synchro(function()
            local hLst = actl.GetWindowInfo().Id
            hLst:EnableRedraw(0)
            hLst:ListSort(1)
            local pos = hLst:ListFindString(1, {Pattern=args.model or "", Flags=F.LIFIND_EXACTMATCH})
            hLst:ListSetCurPos(1, {SelectPos=pos})
            hLst:EnableRedraw(1)
          end)
          hDlg:SetDropdownOpened(II.model.idx, 1)
          return
        end
        fromHistory = true
        function getModels ()
          return utils.readHistory(II.model.History)
        end
      end
      local success, model, argName = pcall(menu.chooseModel, getModels, args, fromHistory)
      if not success then
        far.Message(model, "Error fetching models", nil, "wl")
      elseif model then
        local param = II[argName or "model"]
        if not param then return end
        hDlg:SetText(param.idx, model)
        hDlg:SetFocus(param.idx)
      end
    end,
    name="btnModels"
  }
  II:add {F.DI_BUTTON, "Swi&tch", nil, F.DIF_CENTERGROUP,
    name="btnSwitch"
  }
  II:add {F.DI_BUTTON, "Go&!", nil, F.DIF_CENTERGROUP +F.DIF_DEFAULTBUTTON,
    name="btnGo"
  }

  local function prepActions (Items)
    local Keys,Exec = {},{}
    for _,item in ipairs(Items) do
      if item.keys then
        for key, action in pairs(item.keys) do
          if type(assert(action))=="string" then
            item.keys[key] = assert(item[action])
          end
          Keys[#Keys+1] = item
        end
      end
      if item.onexec then Exec[#Exec+1] = item end
    end
    return {
      processKey=function(curitem,hDlg,idx,key)
        for _,item in ipairs(Keys) do
          local action = item.keys[key]
          if action then
            local ret = action(curitem,hDlg,idx,key)
            if ret~=nil then
              return ret
            end
          end
        end
      end
    }
  end
  local acts = prepActions(II)

  data.DlgProc=function (hDlg,msg,idx,Param2)
    local function run (name, ...)
      local self = ...
      if self[name] then
        return self[name](...)
      end
    end
    local item = II[idx]
    if msg==F.DN_INITDIALOG then
      for param,list in pairs(cfg.info.predefined or {}) do
        populateHistory(II[param], hDlg, list, "init")
      end
      for param,list in pairs(O.stdEnvs) do
        populateHistory(II[param], hDlg, getEnvValues(list))
      end
      for idx,item in ipairs(II) do --luacheck: ignore 421/ idx item
        if item.History then
          hDlg:SetEditPosition(idx,{CurPos=1})
        end
        run("oninit",item,hDlg,idx)
      end
    elseif msg==F.DN_BTNCLICK then
      return run("onclick",item,hDlg,idx)
    elseif msg==F.DN_CTLCOLORDLGITEM then
      return run("oncolor",item,hDlg,idx,Param2)
    elseif msg==F.DN_EDITCHANGE then
      return run("onedit", item, hDlg, idx, Param2[DATA])
    elseif msg==F.DN_GOTFOCUS or msg==F.DN_KILLFOCUS then
      return run("onfocus", item, hDlg, idx, msg==F.DN_GOTFOCUS)
    elseif msg==F.DN_HELP then
      return run("onhelp", item, hDlg, idx, Param2)
    elseif msg==F.DN_CLOSE then
      II.prompt[DATA] = hDlg:GetText(II.prompt.idx)
      for pos,self in ipairs(II) do
        if self.onclose then
          if self:onclose(hDlg,pos,item)==false then
            return false
          end
        end
      end
      if item~=II.btnGo then return end
      for pos,self in ipairs(II) do
        if self.History then
          hDlg:AddHistory(pos, hDlg:GetText(pos))
        end
      end
    elseif msg==(F.DN_CONTROLINPUT or F.DN_KEY) then
      local KeyToName = far.KeyToName or far.InputRecordToName --luacheck: globals far.KeyToName --far2m
      local key = KeyToName(Param2)
      local ret = acts.processKey(item,hDlg,idx,key)
      if ret~=nil then return ret end
      if item then
        ret = run("onkey",item,hDlg,idx,key)
        if ret~=nil then return ret end
      end
      if key==O.key then
        hDlg:Close(II.btnSwitch.idx)
      elseif key=="AltSubtract" then
        hDlg:send(F.DN_BTNCLICK, II.btnClrSession.idx)
      elseif key=="ShiftF4" then
        if II.headers then
          local d_item = hDlg:GetDlgItem(II.headers.idx)
          local id = win.Uuid"6EDB0A6C-2D65-4F1B-80B9-A8C88B08701B"
          local headers = far.InputBox(id, cfg.info.name, "Enter headers (moonscript- or lua-table):",
                                       d_item[HISTORY], d_item[DATA])
          if headers then
            hDlg:SetText(II.headers.idx, headers)
          end
        end
      elseif key=="F5" then
        hDlg:send(F.DN_BTNCLICK, II.btnPreset.idx)
      elseif key=="ShiftF5" then
        local apibase = II.apibase or II.api_base or II.api or II.provider
        if apibase then
          hDlg:SetDropdownOpened(apibase.idx, 1)
        end
      elseif key=="F6" then
        hDlg:send(F.DN_BTNCLICK, II.btnModels.idx)
      elseif key=="ShiftF6" then
        if isFar3 then
          hDlg:send(F.DN_BTNCLICK, II.btnModels.idx)
        elseif II.model then
          hDlg:SetDropdownOpened(II.model.idx, 1)
        end
      elseif key=="PgUp" then
        hDlg:SetFocus(II.prompt.idx)
      end
    end
  end

  State.isDlgOpened = true
  local res = far.Dialog(II:params())
  State.isDlgOpened = false
  if res==-1 then return end

  if II[res].name=="btnGo" then
    if cfg.info.env then
      for _,var in pairs(cfg.info.env) do
        local v = II[var][DATA]
        win.SetEnv(var, v~="" and v or nil)
      end
    end
    if canSession then
      State.useSession = II.chkUseSession[SELECTED]
    end
    State.useStream = II.chkStream[SELECTED]
    State.useWrap = II.chkWrap[SELECTED]
    State.wrapAt = II.edtWrap[DATA]
    local outputFilename = utils.pathjoin(Shared._tmp, ("Ask AI%s.md")
                                          :format(profile=="default" and "" or "."..profile))
    if State.useSession==2 and not isOpened(outputFilename) then
      utils.clearSession(cfg.info, SESSION)
    end
    if not cfg.params.prompt then
      local p = II.prompt[DATA]
      if context~="" then
        local n
        p,n = p:gsub("{{%input%}}", context)
        if n==0 then
          p = p.."\n"..context
        end
      end
      context = p
    end
    local base = {
      context=context,
      session=State.useSession==0 and "" or SESSION,
      stream=State.useStream==1,
    }
    local args = {}
    for i=1,#cfg.params do
      local param = cfg.params[i]
      local value = base[param]==nil and II[param][DATA] or base[param]
      args[i] = value~="" and value or nil
    end
    if context~="" and not cfg.params.context then
      cfg.info._context = context
    end
    local linewrap = ({[0]=nil, tonumber(II.edtWrap[DATA]), "dynamic"})[State.useWrap]
    return cfg.applyParamsFn(unpack(args,1,#cfg.params)),
           II.prompt[DATA],
           linewrap,
           cfg.params.stream and State.useStream==1,
           outputFilename
  elseif II[res].name=="btnSwitch" then
    prompt = II.prompt[DATA]
    menu.chooseCfg(profile, prompt, cfg.filename)
    return
  end
end

return main
