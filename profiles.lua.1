local F = far.Flags
local Shared = ... --name
local II = Shared.II
local utils = Shared.utils
local opts = Shared.opts

local function changeHistoryProfile (historyName, profile)
  return historyName:gsub("^(AskAI)(:?%S*)","%1"..(profile~="default" and ":"..profile or ""))
end

local Id = win.Uuid"DF9BB829-3E76-47F3-9680-95327588111E"
local HelpText = "Select from 'default' profile history"
local function selectFromHistory (item,hDlg,idx)
  if item.History then
    local from = "default"
    local hName = changeHistoryProfile(item.History, from)
    local history = utils.readHistory(hName)
    if history[1] then
      local text = hDlg:GetText(idx)
      local items = far.MakeMenuItems(unpack(history))
      local curidx = #items
      for i=#items,1,-1 do
        if items[i].arg==text then
          curidx = i
          break
        end
      end
      local ret = far.Menu({Title=hName, Bottom=HelpText, SelectIndex=curidx, Id=Id}, items)
      if ret then
        hDlg:EnableRedraw(0)
        hDlg:SetText(idx, ret.arg)
        local sets = opts.cfg.info.sets
        if sets and sets[item.name] then
          for _,subparam in ipairs(sets[item.name]) do
            local pos = II[subparam].idx
            if hDlg:GetText(pos)=="" then
              hName = changeHistoryProfile(II[subparam].History, from)
              history = utils.readHistory(hName)
              local text = history[#history] --newest
              if text then
                hDlg:SetText(pos,text)
              end
            end
          end
        end
        hDlg:EnableRedraw(1)
      end
    end
    return true
  end
end

local function setHistories (hDlg, profile, opt)
  hDlg:EnableRedraw(0)
  for idx,item in ipairs(II) do
    if item.History then
      local text = opt=="keep" and hDlg:GetText(idx)
      if opt=="clear" then hDlg:SetText(idx,"") end
      if profile then
        item.History = changeHistoryProfile(item.History, profile)
        hDlg:SetHistory(idx, item.History)
        if text then hDlg:SetText(idx,text) end
      end
      hDlg:EditUnchangedFlag(idx,1)
    end
  end
  hDlg:EnableRedraw(1)
end

local function addHistories (hDlg)
  for idx,item in ipairs(II) do
    if item.History then
      hDlg:AddHistory(idx, hDlg:GetText(idx))
      hDlg:EditUnchangedFlag(idx,1)
    end
  end
end

local settings = utils.mload()
local function copy (src)
  local dst = {}
  for k,v in pairs(src) do
    dst[k] = v
  end
  return dst
end
local function createProfile (self,hDlg,idx,name)
  settings[name] = copy(settings[opts.profile])
  utils.msave(settings)
  table.insert(self.ListItems, {Text=name})
  if hDlg then
    --https://github.com/FarGroup/FarManager/pull/951
    hDlg:EnableRedraw(0)
    hDlg:ListAddStr(idx, name)
    hDlg:SetText(idx,name)
    hDlg:EnableRedraw(1)
    opts.profile = name
  end
end

local function loadProfile (hDlg,_,name)
  local cfgfile = settings[name].cfgfile
  if cfgfile==opts.cfg.filename then
    local prompt = hDlg:GetText(II.prompt.idx)
    setHistories(hDlg, name, "clear")
    hDlg:SetText(II.prompt.idx, prompt)
    opts.profile = name
  else
    opts.profile = name
    opts.cfg = settings[name].cfgfile
    hDlg:EnableRedraw(0)
    hDlg:SetDropdownOpened(II.profile.idx, 0)
    hDlg:Close(II.profile.idx) --switch profile
  end
end

local function deleteProfile (self,hDlg,idx)
  local curpos = hDlg:ListGetCurPos(idx).SelectPos
  local name = self.ListItems[curpos].Text
  if name~="default" then
    local switchToDefault = name==opts.profile
    local target = switchToDefault and "default" or opts.profile
    for pos,item in ipairs(self.ListItems) do
      if item.Text==target then
        hDlg:ListSetCurPos(idx, {SelectPos=pos})
        hDlg:SetText(idx,target)
        break
      end
    end
    hDlg:ListDelete(idx, { StartIndex=curpos, Count=1 })
    table.remove(self.ListItems, curpos)
    settings[name] = nil
    utils.msave(settings)
    local _, err = utils.cleanHistory(name)
    if err then
      far.Message(err, Shared.name, nil, "w")
    end
    if switchToDefault then
      loadProfile(hDlg, idx, "default")
    end
  end
end

local function MakeProfileItems ()
  local profiles = {}
  for k in pairs(settings) do
    profiles[#profiles+1] = k
  end
  local items = {}
  for _,name in ipairs(profiles) do
    local item = { Text=name }
    if name=="default" then
      item.Flags = F.LIF_CHECKED+string.byte("#")
    end
    items[#items+1] = item
    items[name] = name
  end
  table.sort(items, function(a,b) return a.Text<b.Text end)
  return items
end

local FCF_FG_U_CURLY = F.FCF_FG_U_DATA0 and F.FCF_FG_U_DATA0 +F.FCF_FG_U_DATA1

II:add {F.DI_TEXT, " ", {"-1",-1}}
local HelpTopic = utils.HelpTopic"Profiles"
local _width = math.min(20, math.max(6, opts.profile:len()+2))
II:add {F.DI_COMBOBOX, opts.profile, {0, -1, width=_width}, F.DIF_LISTAUTOHIGHLIGHT, ListItems=MakeProfileItems(),

  oninit=function(_,hDlg,idx)
    hDlg:SetComboboxEvent(idx, F.CBET_KEY)
  end,

  onedit=function(self,hDlg,idx,text)
    if text==self._text then return end
    self._text = text
    self._textInvalid = text=="" or not settings[text] and text:match'[?*|<>%s\\/"]'
    local X1,Y1 = 2,3
    local width = math.max(6, text:len()+1)
    hDlg:SetItemPosition(idx,{ Left=self[X1], Right=self[X1]+width, Top=self[Y1], Bottom=self[Y1] })
    if self._enterPressedInList then
      self._enterPressedInList = nil
      if settings[text] then --is profile
        loadProfile(hDlg, nil, text)
      end
    end
    return true
  end, _text=opts.profile,

  onclose=function(self,hDlg,_,item)
    if item then
      if self._textInvalid then --https://bugs.farmanager.com/view.php?id=4076
        return false
      elseif settings[self._text] then --profile
        return self._text==opts.profile
      else --not profile
        setHistories(hDlg, self._text, "keep")
        createProfile(self, nil, nil, self._text)
      end
    end
  end,

  oncolor=function(self,_,_,Param2)
    if self._textInvalid then
      if Param2[1].Flags then
        Param2[1].Flags = bit64.bor(FCF_FG_U_CURLY, Param2[1].Flags)
        Param2[1].Flags = bit64.band(bit64.bnot(F.FCF_FG_UNDERLINE_INDEX), Param2[1].Flags)
        Param2[1].UnderlineColor = 0xFF0000FF
      else --far2m
        Param2[1] = bit64.bor(F.COMMON_LVB_UNDERSCORE, Param2[1])
      end
    elseif not settings[self._text] then --not profile
      if Param2[1].Flags then
        Param2[1].Flags = bit64.bor(F.FCF_FG_ITALIC, Param2[1].Flags)
      else --far2m
        Param2[1] = bit64.bor(F.COMMON_LVB_REVERSE_VIDEO, Param2[1])
      end
    elseif not self._focus then
      local text = actl.GetColor(far.Colors.COL_DIALOGTEXT)
      for i=1,3 do Param2[i] = text end
    else
      return
    end
    return Param2
  end,

  onfocus=function(self,hDlg,idx,got)
    self._focus = got
    if not got then
      self._from = nil
      if self._textInvalid then
        if 1==far.Message(("Invalid profile name '%s'. Edit?"):format(self._text), Shared.name, ";Ok;Cancel") then
          return idx
        end
      elseif not settings[self._text] or self._text==opts.profile then
        return
      else
        if 1==far.Message(("Load '%s' profile?"):format(self._text), Shared.name, ";Ok;Cancel") then
          loadProfile(hDlg, nil, self._text)
          return
        end
      end
      hDlg:SetText(idx, opts.profile) --reset text
    end
  end,

  onhelp=function()
    return HelpTopic
  end,

  onkey=function(self,hDlg,idx,key)
    if hDlg:GetDropdownOpened(idx)==1 then
      if key=="Enter" then
        self._enterPressedInList = true
      elseif key=="AltO" then --toggle (close)
        hDlg:SetDropdownOpened(idx,0)
        return true
      elseif key=="ShiftDel" or key=="ShiftNumDel" then
        deleteProfile(self,hDlg,idx)
        return true
      end
    elseif key=="ShiftEnter" then
      if self._textInvalid then
        hDlg:SetText(idx, opts.profile)
      end
      return true
    elseif key=="Enter" then
      if settings[self._text] then --is profile
        loadProfile(hDlg, idx, self._text)
      end
      hDlg:SetFocus(self._from or II.prompt.idx)
      return true
    end
  end,

  keys={
    CtrlUp=function(...)
      if opts.profile~="default" then
        return selectFromHistory(...)
      end
    end,

    CtrlHome=function(item,hDlg,idx)
      if item~=II.profile then
        II.profile._from = idx
        hDlg:SetFocus(II.profile.idx)
        return true
      end
    end,

    PgUp=function(item,hDlg)
      if item==II.prompt then
        hDlg:SetFocus(II.profile.idx)
        return true
      end
    end,

    ShiftEnter=function(item,hDlg)
      if item.History then
        local self = II.profile
        if not settings[self._text] then
          setHistories(hDlg, self._text, "keep")
          createProfile(self, hDlg, self.idx, self._text)
        end
        addHistories(hDlg)
        return true
      end
    end
  },

  name="profile"
}
